
RTOS_test_linux.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a80  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08002c10  08002c10  00012c10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08002cd4  08002cd4  00012cd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08002cdc  08002cdc  00012cdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08002ce0  08002ce0  00012ce0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  20000000  08002ce4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
  8 .bss          00003fc4  20000010  20000010  00020010  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20003fd4  20003fd4  00020010  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 11 .debug_info   0000a111  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00001bb6  00000000  00000000  0002a151  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000008b0  00000000  00000000  0002bd08  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000007c8  00000000  00000000  0002c5b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00004099  00000000  00000000  0002cd80  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000035fe  00000000  00000000  00030e19  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00034417  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002178  00000000  00000000  00034494  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002bf8 	.word	0x08002bf8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08002bf8 	.word	0x08002bf8

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e4:	f000 b97a 	b.w	80004dc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	468c      	mov	ip, r1
 8000206:	460d      	mov	r5, r1
 8000208:	4604      	mov	r4, r0
 800020a:	9e08      	ldr	r6, [sp, #32]
 800020c:	2b00      	cmp	r3, #0
 800020e:	d151      	bne.n	80002b4 <__udivmoddi4+0xb4>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d96d      	bls.n	80002f2 <__udivmoddi4+0xf2>
 8000216:	fab2 fe82 	clz	lr, r2
 800021a:	f1be 0f00 	cmp.w	lr, #0
 800021e:	d00b      	beq.n	8000238 <__udivmoddi4+0x38>
 8000220:	f1ce 0c20 	rsb	ip, lr, #32
 8000224:	fa01 f50e 	lsl.w	r5, r1, lr
 8000228:	fa20 fc0c 	lsr.w	ip, r0, ip
 800022c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000230:	ea4c 0c05 	orr.w	ip, ip, r5
 8000234:	fa00 f40e 	lsl.w	r4, r0, lr
 8000238:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800023c:	0c25      	lsrs	r5, r4, #16
 800023e:	fbbc f8fa 	udiv	r8, ip, sl
 8000242:	fa1f f987 	uxth.w	r9, r7
 8000246:	fb0a cc18 	mls	ip, sl, r8, ip
 800024a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800024e:	fb08 f309 	mul.w	r3, r8, r9
 8000252:	42ab      	cmp	r3, r5
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x6c>
 8000256:	19ed      	adds	r5, r5, r7
 8000258:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 800025c:	f080 8123 	bcs.w	80004a6 <__udivmoddi4+0x2a6>
 8000260:	42ab      	cmp	r3, r5
 8000262:	f240 8120 	bls.w	80004a6 <__udivmoddi4+0x2a6>
 8000266:	f1a8 0802 	sub.w	r8, r8, #2
 800026a:	443d      	add	r5, r7
 800026c:	1aed      	subs	r5, r5, r3
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb5 f0fa 	udiv	r0, r5, sl
 8000274:	fb0a 5510 	mls	r5, sl, r0, r5
 8000278:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800027c:	fb00 f909 	mul.w	r9, r0, r9
 8000280:	45a1      	cmp	r9, r4
 8000282:	d909      	bls.n	8000298 <__udivmoddi4+0x98>
 8000284:	19e4      	adds	r4, r4, r7
 8000286:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800028a:	f080 810a 	bcs.w	80004a2 <__udivmoddi4+0x2a2>
 800028e:	45a1      	cmp	r9, r4
 8000290:	f240 8107 	bls.w	80004a2 <__udivmoddi4+0x2a2>
 8000294:	3802      	subs	r0, #2
 8000296:	443c      	add	r4, r7
 8000298:	eba4 0409 	sub.w	r4, r4, r9
 800029c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002a0:	2100      	movs	r1, #0
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	d061      	beq.n	800036a <__udivmoddi4+0x16a>
 80002a6:	fa24 f40e 	lsr.w	r4, r4, lr
 80002aa:	2300      	movs	r3, #0
 80002ac:	6034      	str	r4, [r6, #0]
 80002ae:	6073      	str	r3, [r6, #4]
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d907      	bls.n	80002c8 <__udivmoddi4+0xc8>
 80002b8:	2e00      	cmp	r6, #0
 80002ba:	d054      	beq.n	8000366 <__udivmoddi4+0x166>
 80002bc:	2100      	movs	r1, #0
 80002be:	e886 0021 	stmia.w	r6, {r0, r5}
 80002c2:	4608      	mov	r0, r1
 80002c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c8:	fab3 f183 	clz	r1, r3
 80002cc:	2900      	cmp	r1, #0
 80002ce:	f040 808e 	bne.w	80003ee <__udivmoddi4+0x1ee>
 80002d2:	42ab      	cmp	r3, r5
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xdc>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80fa 	bhi.w	80004d0 <__udivmoddi4+0x2d0>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb65 0503 	sbc.w	r5, r5, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	46ac      	mov	ip, r5
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	d03f      	beq.n	800036a <__udivmoddi4+0x16a>
 80002ea:	e886 1010 	stmia.w	r6, {r4, ip}
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	b912      	cbnz	r2, 80002fa <__udivmoddi4+0xfa>
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb7 f7f2 	udiv	r7, r7, r2
 80002fa:	fab7 fe87 	clz	lr, r7
 80002fe:	f1be 0f00 	cmp.w	lr, #0
 8000302:	d134      	bne.n	800036e <__udivmoddi4+0x16e>
 8000304:	1beb      	subs	r3, r5, r7
 8000306:	0c3a      	lsrs	r2, r7, #16
 8000308:	fa1f fc87 	uxth.w	ip, r7
 800030c:	2101      	movs	r1, #1
 800030e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000312:	0c25      	lsrs	r5, r4, #16
 8000314:	fb02 3318 	mls	r3, r2, r8, r3
 8000318:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800031c:	fb0c f308 	mul.w	r3, ip, r8
 8000320:	42ab      	cmp	r3, r5
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0x134>
 8000324:	19ed      	adds	r5, r5, r7
 8000326:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x132>
 800032c:	42ab      	cmp	r3, r5
 800032e:	f200 80d1 	bhi.w	80004d4 <__udivmoddi4+0x2d4>
 8000332:	4680      	mov	r8, r0
 8000334:	1aed      	subs	r5, r5, r3
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb5 f0f2 	udiv	r0, r5, r2
 800033c:	fb02 5510 	mls	r5, r2, r0, r5
 8000340:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000344:	fb0c fc00 	mul.w	ip, ip, r0
 8000348:	45a4      	cmp	ip, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x15c>
 800034c:	19e4      	adds	r4, r4, r7
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x15a>
 8000354:	45a4      	cmp	ip, r4
 8000356:	f200 80b8 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 040c 	sub.w	r4, r4, ip
 8000360:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000364:	e79d      	b.n	80002a2 <__udivmoddi4+0xa2>
 8000366:	4631      	mov	r1, r6
 8000368:	4630      	mov	r0, r6
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	f1ce 0420 	rsb	r4, lr, #32
 8000372:	fa05 f30e 	lsl.w	r3, r5, lr
 8000376:	fa07 f70e 	lsl.w	r7, r7, lr
 800037a:	fa20 f804 	lsr.w	r8, r0, r4
 800037e:	0c3a      	lsrs	r2, r7, #16
 8000380:	fa25 f404 	lsr.w	r4, r5, r4
 8000384:	ea48 0803 	orr.w	r8, r8, r3
 8000388:	fbb4 f1f2 	udiv	r1, r4, r2
 800038c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000390:	fb02 4411 	mls	r4, r2, r1, r4
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800039c:	fb01 f30c 	mul.w	r3, r1, ip
 80003a0:	42ab      	cmp	r3, r5
 80003a2:	fa00 f40e 	lsl.w	r4, r0, lr
 80003a6:	d909      	bls.n	80003bc <__udivmoddi4+0x1bc>
 80003a8:	19ed      	adds	r5, r5, r7
 80003aa:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 80003ae:	f080 808a 	bcs.w	80004c6 <__udivmoddi4+0x2c6>
 80003b2:	42ab      	cmp	r3, r5
 80003b4:	f240 8087 	bls.w	80004c6 <__udivmoddi4+0x2c6>
 80003b8:	3902      	subs	r1, #2
 80003ba:	443d      	add	r5, r7
 80003bc:	1aeb      	subs	r3, r5, r3
 80003be:	fa1f f588 	uxth.w	r5, r8
 80003c2:	fbb3 f0f2 	udiv	r0, r3, r2
 80003c6:	fb02 3310 	mls	r3, r2, r0, r3
 80003ca:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003ce:	fb00 f30c 	mul.w	r3, r0, ip
 80003d2:	42ab      	cmp	r3, r5
 80003d4:	d907      	bls.n	80003e6 <__udivmoddi4+0x1e6>
 80003d6:	19ed      	adds	r5, r5, r7
 80003d8:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80003dc:	d26f      	bcs.n	80004be <__udivmoddi4+0x2be>
 80003de:	42ab      	cmp	r3, r5
 80003e0:	d96d      	bls.n	80004be <__udivmoddi4+0x2be>
 80003e2:	3802      	subs	r0, #2
 80003e4:	443d      	add	r5, r7
 80003e6:	1aeb      	subs	r3, r5, r3
 80003e8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003ec:	e78f      	b.n	800030e <__udivmoddi4+0x10e>
 80003ee:	f1c1 0720 	rsb	r7, r1, #32
 80003f2:	fa22 f807 	lsr.w	r8, r2, r7
 80003f6:	408b      	lsls	r3, r1
 80003f8:	fa05 f401 	lsl.w	r4, r5, r1
 80003fc:	ea48 0303 	orr.w	r3, r8, r3
 8000400:	fa20 fe07 	lsr.w	lr, r0, r7
 8000404:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000408:	40fd      	lsrs	r5, r7
 800040a:	ea4e 0e04 	orr.w	lr, lr, r4
 800040e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000412:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000416:	fb0c 5519 	mls	r5, ip, r9, r5
 800041a:	fa1f f883 	uxth.w	r8, r3
 800041e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000422:	fb09 f408 	mul.w	r4, r9, r8
 8000426:	42ac      	cmp	r4, r5
 8000428:	fa02 f201 	lsl.w	r2, r2, r1
 800042c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x244>
 8000432:	18ed      	adds	r5, r5, r3
 8000434:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000438:	d243      	bcs.n	80004c2 <__udivmoddi4+0x2c2>
 800043a:	42ac      	cmp	r4, r5
 800043c:	d941      	bls.n	80004c2 <__udivmoddi4+0x2c2>
 800043e:	f1a9 0902 	sub.w	r9, r9, #2
 8000442:	441d      	add	r5, r3
 8000444:	1b2d      	subs	r5, r5, r4
 8000446:	fa1f fe8e 	uxth.w	lr, lr
 800044a:	fbb5 f0fc 	udiv	r0, r5, ip
 800044e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000452:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000456:	fb00 f808 	mul.w	r8, r0, r8
 800045a:	45a0      	cmp	r8, r4
 800045c:	d907      	bls.n	800046e <__udivmoddi4+0x26e>
 800045e:	18e4      	adds	r4, r4, r3
 8000460:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000464:	d229      	bcs.n	80004ba <__udivmoddi4+0x2ba>
 8000466:	45a0      	cmp	r8, r4
 8000468:	d927      	bls.n	80004ba <__udivmoddi4+0x2ba>
 800046a:	3802      	subs	r0, #2
 800046c:	441c      	add	r4, r3
 800046e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000472:	eba4 0408 	sub.w	r4, r4, r8
 8000476:	fba0 8902 	umull	r8, r9, r0, r2
 800047a:	454c      	cmp	r4, r9
 800047c:	46c6      	mov	lr, r8
 800047e:	464d      	mov	r5, r9
 8000480:	d315      	bcc.n	80004ae <__udivmoddi4+0x2ae>
 8000482:	d012      	beq.n	80004aa <__udivmoddi4+0x2aa>
 8000484:	b156      	cbz	r6, 800049c <__udivmoddi4+0x29c>
 8000486:	ebba 030e 	subs.w	r3, sl, lr
 800048a:	eb64 0405 	sbc.w	r4, r4, r5
 800048e:	fa04 f707 	lsl.w	r7, r4, r7
 8000492:	40cb      	lsrs	r3, r1
 8000494:	431f      	orrs	r7, r3
 8000496:	40cc      	lsrs	r4, r1
 8000498:	6037      	str	r7, [r6, #0]
 800049a:	6074      	str	r4, [r6, #4]
 800049c:	2100      	movs	r1, #0
 800049e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004a2:	4618      	mov	r0, r3
 80004a4:	e6f8      	b.n	8000298 <__udivmoddi4+0x98>
 80004a6:	4690      	mov	r8, r2
 80004a8:	e6e0      	b.n	800026c <__udivmoddi4+0x6c>
 80004aa:	45c2      	cmp	sl, r8
 80004ac:	d2ea      	bcs.n	8000484 <__udivmoddi4+0x284>
 80004ae:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b2:	eb69 0503 	sbc.w	r5, r9, r3
 80004b6:	3801      	subs	r0, #1
 80004b8:	e7e4      	b.n	8000484 <__udivmoddi4+0x284>
 80004ba:	4628      	mov	r0, r5
 80004bc:	e7d7      	b.n	800046e <__udivmoddi4+0x26e>
 80004be:	4640      	mov	r0, r8
 80004c0:	e791      	b.n	80003e6 <__udivmoddi4+0x1e6>
 80004c2:	4681      	mov	r9, r0
 80004c4:	e7be      	b.n	8000444 <__udivmoddi4+0x244>
 80004c6:	4601      	mov	r1, r0
 80004c8:	e778      	b.n	80003bc <__udivmoddi4+0x1bc>
 80004ca:	3802      	subs	r0, #2
 80004cc:	443c      	add	r4, r7
 80004ce:	e745      	b.n	800035c <__udivmoddi4+0x15c>
 80004d0:	4608      	mov	r0, r1
 80004d2:	e708      	b.n	80002e6 <__udivmoddi4+0xe6>
 80004d4:	f1a8 0802 	sub.w	r8, r8, #2
 80004d8:	443d      	add	r5, r7
 80004da:	e72b      	b.n	8000334 <__udivmoddi4+0x134>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004e4:	4a0e      	ldr	r2, [pc, #56]	; (8000520 <HAL_Init+0x40>)
 80004e6:	4b0e      	ldr	r3, [pc, #56]	; (8000520 <HAL_Init+0x40>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004f0:	4a0b      	ldr	r2, [pc, #44]	; (8000520 <HAL_Init+0x40>)
 80004f2:	4b0b      	ldr	r3, [pc, #44]	; (8000520 <HAL_Init+0x40>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004fc:	4a08      	ldr	r2, [pc, #32]	; (8000520 <HAL_Init+0x40>)
 80004fe:	4b08      	ldr	r3, [pc, #32]	; (8000520 <HAL_Init+0x40>)
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000506:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000508:	2003      	movs	r0, #3
 800050a:	f000 f90b 	bl	8000724 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800050e:	200f      	movs	r0, #15
 8000510:	f000 f808 	bl	8000524 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000514:	f002 fab0 	bl	8002a78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000518:	2300      	movs	r3, #0
}
 800051a:	4618      	mov	r0, r3
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	40023c00 	.word	0x40023c00

08000524 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800052c:	4b12      	ldr	r3, [pc, #72]	; (8000578 <HAL_InitTick+0x54>)
 800052e:	681a      	ldr	r2, [r3, #0]
 8000530:	4b12      	ldr	r3, [pc, #72]	; (800057c <HAL_InitTick+0x58>)
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	4619      	mov	r1, r3
 8000536:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800053a:	fbb3 f3f1 	udiv	r3, r3, r1
 800053e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000542:	4618      	mov	r0, r3
 8000544:	f000 f915 	bl	8000772 <HAL_SYSTICK_Config>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	d001      	beq.n	8000552 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800054e:	2301      	movs	r3, #1
 8000550:	e00e      	b.n	8000570 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	2b0f      	cmp	r3, #15
 8000556:	d80a      	bhi.n	800056e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000558:	2200      	movs	r2, #0
 800055a:	6879      	ldr	r1, [r7, #4]
 800055c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000560:	f000 f8eb 	bl	800073a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000564:	4a06      	ldr	r2, [pc, #24]	; (8000580 <HAL_InitTick+0x5c>)
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800056a:	2300      	movs	r3, #0
 800056c:	e000      	b.n	8000570 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800056e:	2301      	movs	r3, #1
}
 8000570:	4618      	mov	r0, r3
 8000572:	3708      	adds	r7, #8
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}
 8000578:	2000000c 	.word	0x2000000c
 800057c:	20000004 	.word	0x20000004
 8000580:	20000000 	.word	0x20000000

08000584 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000588:	4b06      	ldr	r3, [pc, #24]	; (80005a4 <HAL_IncTick+0x20>)
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	461a      	mov	r2, r3
 800058e:	4b06      	ldr	r3, [pc, #24]	; (80005a8 <HAL_IncTick+0x24>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	4413      	add	r3, r2
 8000594:	4a04      	ldr	r2, [pc, #16]	; (80005a8 <HAL_IncTick+0x24>)
 8000596:	6013      	str	r3, [r2, #0]
}
 8000598:	bf00      	nop
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop
 80005a4:	20000004 	.word	0x20000004
 80005a8:	20003fcc 	.word	0x20003fcc

080005ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
  return uwTick;
 80005b0:	4b03      	ldr	r3, [pc, #12]	; (80005c0 <HAL_GetTick+0x14>)
 80005b2:	681b      	ldr	r3, [r3, #0]
}
 80005b4:	4618      	mov	r0, r3
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop
 80005c0:	20003fcc 	.word	0x20003fcc

080005c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005c4:	b480      	push	{r7}
 80005c6:	b085      	sub	sp, #20
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	f003 0307 	and.w	r3, r3, #7
 80005d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005d4:	4b0c      	ldr	r3, [pc, #48]	; (8000608 <__NVIC_SetPriorityGrouping+0x44>)
 80005d6:	68db      	ldr	r3, [r3, #12]
 80005d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005da:	68ba      	ldr	r2, [r7, #8]
 80005dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005e0:	4013      	ands	r3, r2
 80005e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005e8:	68bb      	ldr	r3, [r7, #8]
 80005ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005f6:	4a04      	ldr	r2, [pc, #16]	; (8000608 <__NVIC_SetPriorityGrouping+0x44>)
 80005f8:	68bb      	ldr	r3, [r7, #8]
 80005fa:	60d3      	str	r3, [r2, #12]
}
 80005fc:	bf00      	nop
 80005fe:	3714      	adds	r7, #20
 8000600:	46bd      	mov	sp, r7
 8000602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000606:	4770      	bx	lr
 8000608:	e000ed00 	.word	0xe000ed00

0800060c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000610:	4b04      	ldr	r3, [pc, #16]	; (8000624 <__NVIC_GetPriorityGrouping+0x18>)
 8000612:	68db      	ldr	r3, [r3, #12]
 8000614:	0a1b      	lsrs	r3, r3, #8
 8000616:	f003 0307 	and.w	r3, r3, #7
}
 800061a:	4618      	mov	r0, r3
 800061c:	46bd      	mov	sp, r7
 800061e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000622:	4770      	bx	lr
 8000624:	e000ed00 	.word	0xe000ed00

08000628 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000628:	b480      	push	{r7}
 800062a:	b083      	sub	sp, #12
 800062c:	af00      	add	r7, sp, #0
 800062e:	4603      	mov	r3, r0
 8000630:	6039      	str	r1, [r7, #0]
 8000632:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000634:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000638:	2b00      	cmp	r3, #0
 800063a:	db0a      	blt.n	8000652 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800063c:	490d      	ldr	r1, [pc, #52]	; (8000674 <__NVIC_SetPriority+0x4c>)
 800063e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000642:	683a      	ldr	r2, [r7, #0]
 8000644:	b2d2      	uxtb	r2, r2
 8000646:	0112      	lsls	r2, r2, #4
 8000648:	b2d2      	uxtb	r2, r2
 800064a:	440b      	add	r3, r1
 800064c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000650:	e00a      	b.n	8000668 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000652:	4909      	ldr	r1, [pc, #36]	; (8000678 <__NVIC_SetPriority+0x50>)
 8000654:	79fb      	ldrb	r3, [r7, #7]
 8000656:	f003 030f 	and.w	r3, r3, #15
 800065a:	3b04      	subs	r3, #4
 800065c:	683a      	ldr	r2, [r7, #0]
 800065e:	b2d2      	uxtb	r2, r2
 8000660:	0112      	lsls	r2, r2, #4
 8000662:	b2d2      	uxtb	r2, r2
 8000664:	440b      	add	r3, r1
 8000666:	761a      	strb	r2, [r3, #24]
}
 8000668:	bf00      	nop
 800066a:	370c      	adds	r7, #12
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr
 8000674:	e000e100 	.word	0xe000e100
 8000678:	e000ed00 	.word	0xe000ed00

0800067c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800067c:	b480      	push	{r7}
 800067e:	b089      	sub	sp, #36	; 0x24
 8000680:	af00      	add	r7, sp, #0
 8000682:	60f8      	str	r0, [r7, #12]
 8000684:	60b9      	str	r1, [r7, #8]
 8000686:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	f003 0307 	and.w	r3, r3, #7
 800068e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000690:	69fb      	ldr	r3, [r7, #28]
 8000692:	f1c3 0307 	rsb	r3, r3, #7
 8000696:	2b04      	cmp	r3, #4
 8000698:	bf28      	it	cs
 800069a:	2304      	movcs	r3, #4
 800069c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800069e:	69fb      	ldr	r3, [r7, #28]
 80006a0:	3304      	adds	r3, #4
 80006a2:	2b06      	cmp	r3, #6
 80006a4:	d902      	bls.n	80006ac <NVIC_EncodePriority+0x30>
 80006a6:	69fb      	ldr	r3, [r7, #28]
 80006a8:	3b03      	subs	r3, #3
 80006aa:	e000      	b.n	80006ae <NVIC_EncodePriority+0x32>
 80006ac:	2300      	movs	r3, #0
 80006ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006b0:	2201      	movs	r2, #1
 80006b2:	69bb      	ldr	r3, [r7, #24]
 80006b4:	fa02 f303 	lsl.w	r3, r2, r3
 80006b8:	1e5a      	subs	r2, r3, #1
 80006ba:	68bb      	ldr	r3, [r7, #8]
 80006bc:	401a      	ands	r2, r3
 80006be:	697b      	ldr	r3, [r7, #20]
 80006c0:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006c2:	2101      	movs	r1, #1
 80006c4:	697b      	ldr	r3, [r7, #20]
 80006c6:	fa01 f303 	lsl.w	r3, r1, r3
 80006ca:	1e59      	subs	r1, r3, #1
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006d0:	4313      	orrs	r3, r2
         );
}
 80006d2:	4618      	mov	r0, r3
 80006d4:	3724      	adds	r7, #36	; 0x24
 80006d6:	46bd      	mov	sp, r7
 80006d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006dc:	4770      	bx	lr
	...

080006e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	3b01      	subs	r3, #1
 80006ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80006f0:	d301      	bcc.n	80006f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80006f2:	2301      	movs	r3, #1
 80006f4:	e00f      	b.n	8000716 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006f6:	4a0a      	ldr	r2, [pc, #40]	; (8000720 <SysTick_Config+0x40>)
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	3b01      	subs	r3, #1
 80006fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80006fe:	210f      	movs	r1, #15
 8000700:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000704:	f7ff ff90 	bl	8000628 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000708:	4b05      	ldr	r3, [pc, #20]	; (8000720 <SysTick_Config+0x40>)
 800070a:	2200      	movs	r2, #0
 800070c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800070e:	4b04      	ldr	r3, [pc, #16]	; (8000720 <SysTick_Config+0x40>)
 8000710:	2207      	movs	r2, #7
 8000712:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000714:	2300      	movs	r3, #0
}
 8000716:	4618      	mov	r0, r3
 8000718:	3708      	adds	r7, #8
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	e000e010 	.word	0xe000e010

08000724 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800072c:	6878      	ldr	r0, [r7, #4]
 800072e:	f7ff ff49 	bl	80005c4 <__NVIC_SetPriorityGrouping>
}
 8000732:	bf00      	nop
 8000734:	3708      	adds	r7, #8
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}

0800073a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800073a:	b580      	push	{r7, lr}
 800073c:	b086      	sub	sp, #24
 800073e:	af00      	add	r7, sp, #0
 8000740:	4603      	mov	r3, r0
 8000742:	60b9      	str	r1, [r7, #8]
 8000744:	607a      	str	r2, [r7, #4]
 8000746:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000748:	2300      	movs	r3, #0
 800074a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800074c:	f7ff ff5e 	bl	800060c <__NVIC_GetPriorityGrouping>
 8000750:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000752:	687a      	ldr	r2, [r7, #4]
 8000754:	68b9      	ldr	r1, [r7, #8]
 8000756:	6978      	ldr	r0, [r7, #20]
 8000758:	f7ff ff90 	bl	800067c <NVIC_EncodePriority>
 800075c:	4602      	mov	r2, r0
 800075e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000762:	4611      	mov	r1, r2
 8000764:	4618      	mov	r0, r3
 8000766:	f7ff ff5f 	bl	8000628 <__NVIC_SetPriority>
}
 800076a:	bf00      	nop
 800076c:	3718      	adds	r7, #24
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}

08000772 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000772:	b580      	push	{r7, lr}
 8000774:	b082      	sub	sp, #8
 8000776:	af00      	add	r7, sp, #0
 8000778:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800077a:	6878      	ldr	r0, [r7, #4]
 800077c:	f7ff ffb0 	bl	80006e0 <SysTick_Config>
 8000780:	4603      	mov	r3, r0
}
 8000782:	4618      	mov	r0, r3
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
	...

0800078c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800078c:	b480      	push	{r7}
 800078e:	b089      	sub	sp, #36	; 0x24
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
 8000794:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000796:	2300      	movs	r3, #0
 8000798:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800079a:	2300      	movs	r3, #0
 800079c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800079e:	2300      	movs	r3, #0
 80007a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80007a2:	2300      	movs	r3, #0
 80007a4:	61fb      	str	r3, [r7, #28]
 80007a6:	e16b      	b.n	8000a80 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80007a8:	2201      	movs	r2, #1
 80007aa:	69fb      	ldr	r3, [r7, #28]
 80007ac:	fa02 f303 	lsl.w	r3, r2, r3
 80007b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80007b2:	683b      	ldr	r3, [r7, #0]
 80007b4:	681a      	ldr	r2, [r3, #0]
 80007b6:	697b      	ldr	r3, [r7, #20]
 80007b8:	4013      	ands	r3, r2
 80007ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80007bc:	693a      	ldr	r2, [r7, #16]
 80007be:	697b      	ldr	r3, [r7, #20]
 80007c0:	429a      	cmp	r2, r3
 80007c2:	f040 815a 	bne.w	8000a7a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	685b      	ldr	r3, [r3, #4]
 80007ca:	2b01      	cmp	r3, #1
 80007cc:	d00b      	beq.n	80007e6 <HAL_GPIO_Init+0x5a>
 80007ce:	683b      	ldr	r3, [r7, #0]
 80007d0:	685b      	ldr	r3, [r3, #4]
 80007d2:	2b02      	cmp	r3, #2
 80007d4:	d007      	beq.n	80007e6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80007d6:	683b      	ldr	r3, [r7, #0]
 80007d8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007da:	2b11      	cmp	r3, #17
 80007dc:	d003      	beq.n	80007e6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80007de:	683b      	ldr	r3, [r7, #0]
 80007e0:	685b      	ldr	r3, [r3, #4]
 80007e2:	2b12      	cmp	r3, #18
 80007e4:	d130      	bne.n	8000848 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	689b      	ldr	r3, [r3, #8]
 80007ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80007ec:	69fb      	ldr	r3, [r7, #28]
 80007ee:	005b      	lsls	r3, r3, #1
 80007f0:	2203      	movs	r2, #3
 80007f2:	fa02 f303 	lsl.w	r3, r2, r3
 80007f6:	43db      	mvns	r3, r3
 80007f8:	69ba      	ldr	r2, [r7, #24]
 80007fa:	4013      	ands	r3, r2
 80007fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80007fe:	683b      	ldr	r3, [r7, #0]
 8000800:	68da      	ldr	r2, [r3, #12]
 8000802:	69fb      	ldr	r3, [r7, #28]
 8000804:	005b      	lsls	r3, r3, #1
 8000806:	fa02 f303 	lsl.w	r3, r2, r3
 800080a:	69ba      	ldr	r2, [r7, #24]
 800080c:	4313      	orrs	r3, r2
 800080e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	69ba      	ldr	r2, [r7, #24]
 8000814:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	685b      	ldr	r3, [r3, #4]
 800081a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800081c:	2201      	movs	r2, #1
 800081e:	69fb      	ldr	r3, [r7, #28]
 8000820:	fa02 f303 	lsl.w	r3, r2, r3
 8000824:	43db      	mvns	r3, r3
 8000826:	69ba      	ldr	r2, [r7, #24]
 8000828:	4013      	ands	r3, r2
 800082a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800082c:	683b      	ldr	r3, [r7, #0]
 800082e:	685b      	ldr	r3, [r3, #4]
 8000830:	091b      	lsrs	r3, r3, #4
 8000832:	f003 0201 	and.w	r2, r3, #1
 8000836:	69fb      	ldr	r3, [r7, #28]
 8000838:	fa02 f303 	lsl.w	r3, r2, r3
 800083c:	69ba      	ldr	r2, [r7, #24]
 800083e:	4313      	orrs	r3, r2
 8000840:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	69ba      	ldr	r2, [r7, #24]
 8000846:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	68db      	ldr	r3, [r3, #12]
 800084c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800084e:	69fb      	ldr	r3, [r7, #28]
 8000850:	005b      	lsls	r3, r3, #1
 8000852:	2203      	movs	r2, #3
 8000854:	fa02 f303 	lsl.w	r3, r2, r3
 8000858:	43db      	mvns	r3, r3
 800085a:	69ba      	ldr	r2, [r7, #24]
 800085c:	4013      	ands	r3, r2
 800085e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000860:	683b      	ldr	r3, [r7, #0]
 8000862:	689a      	ldr	r2, [r3, #8]
 8000864:	69fb      	ldr	r3, [r7, #28]
 8000866:	005b      	lsls	r3, r3, #1
 8000868:	fa02 f303 	lsl.w	r3, r2, r3
 800086c:	69ba      	ldr	r2, [r7, #24]
 800086e:	4313      	orrs	r3, r2
 8000870:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	69ba      	ldr	r2, [r7, #24]
 8000876:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	685b      	ldr	r3, [r3, #4]
 800087c:	2b02      	cmp	r3, #2
 800087e:	d003      	beq.n	8000888 <HAL_GPIO_Init+0xfc>
 8000880:	683b      	ldr	r3, [r7, #0]
 8000882:	685b      	ldr	r3, [r3, #4]
 8000884:	2b12      	cmp	r3, #18
 8000886:	d123      	bne.n	80008d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000888:	69fb      	ldr	r3, [r7, #28]
 800088a:	08da      	lsrs	r2, r3, #3
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	3208      	adds	r2, #8
 8000890:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000894:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000896:	69fb      	ldr	r3, [r7, #28]
 8000898:	f003 0307 	and.w	r3, r3, #7
 800089c:	009b      	lsls	r3, r3, #2
 800089e:	220f      	movs	r2, #15
 80008a0:	fa02 f303 	lsl.w	r3, r2, r3
 80008a4:	43db      	mvns	r3, r3
 80008a6:	69ba      	ldr	r2, [r7, #24]
 80008a8:	4013      	ands	r3, r2
 80008aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	691a      	ldr	r2, [r3, #16]
 80008b0:	69fb      	ldr	r3, [r7, #28]
 80008b2:	f003 0307 	and.w	r3, r3, #7
 80008b6:	009b      	lsls	r3, r3, #2
 80008b8:	fa02 f303 	lsl.w	r3, r2, r3
 80008bc:	69ba      	ldr	r2, [r7, #24]
 80008be:	4313      	orrs	r3, r2
 80008c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80008c2:	69fb      	ldr	r3, [r7, #28]
 80008c4:	08da      	lsrs	r2, r3, #3
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	3208      	adds	r2, #8
 80008ca:	69b9      	ldr	r1, [r7, #24]
 80008cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80008d6:	69fb      	ldr	r3, [r7, #28]
 80008d8:	005b      	lsls	r3, r3, #1
 80008da:	2203      	movs	r2, #3
 80008dc:	fa02 f303 	lsl.w	r3, r2, r3
 80008e0:	43db      	mvns	r3, r3
 80008e2:	69ba      	ldr	r2, [r7, #24]
 80008e4:	4013      	ands	r3, r2
 80008e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	685b      	ldr	r3, [r3, #4]
 80008ec:	f003 0203 	and.w	r2, r3, #3
 80008f0:	69fb      	ldr	r3, [r7, #28]
 80008f2:	005b      	lsls	r3, r3, #1
 80008f4:	fa02 f303 	lsl.w	r3, r2, r3
 80008f8:	69ba      	ldr	r2, [r7, #24]
 80008fa:	4313      	orrs	r3, r2
 80008fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	69ba      	ldr	r2, [r7, #24]
 8000902:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000904:	683b      	ldr	r3, [r7, #0]
 8000906:	685b      	ldr	r3, [r3, #4]
 8000908:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800090c:	2b00      	cmp	r3, #0
 800090e:	f000 80b4 	beq.w	8000a7a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	60fb      	str	r3, [r7, #12]
 8000916:	4a5f      	ldr	r2, [pc, #380]	; (8000a94 <HAL_GPIO_Init+0x308>)
 8000918:	4b5e      	ldr	r3, [pc, #376]	; (8000a94 <HAL_GPIO_Init+0x308>)
 800091a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800091c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000920:	6453      	str	r3, [r2, #68]	; 0x44
 8000922:	4b5c      	ldr	r3, [pc, #368]	; (8000a94 <HAL_GPIO_Init+0x308>)
 8000924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000926:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800092a:	60fb      	str	r3, [r7, #12]
 800092c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800092e:	4a5a      	ldr	r2, [pc, #360]	; (8000a98 <HAL_GPIO_Init+0x30c>)
 8000930:	69fb      	ldr	r3, [r7, #28]
 8000932:	089b      	lsrs	r3, r3, #2
 8000934:	3302      	adds	r3, #2
 8000936:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800093a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800093c:	69fb      	ldr	r3, [r7, #28]
 800093e:	f003 0303 	and.w	r3, r3, #3
 8000942:	009b      	lsls	r3, r3, #2
 8000944:	220f      	movs	r2, #15
 8000946:	fa02 f303 	lsl.w	r3, r2, r3
 800094a:	43db      	mvns	r3, r3
 800094c:	69ba      	ldr	r2, [r7, #24]
 800094e:	4013      	ands	r3, r2
 8000950:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	4a51      	ldr	r2, [pc, #324]	; (8000a9c <HAL_GPIO_Init+0x310>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d02b      	beq.n	80009b2 <HAL_GPIO_Init+0x226>
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	4a50      	ldr	r2, [pc, #320]	; (8000aa0 <HAL_GPIO_Init+0x314>)
 800095e:	4293      	cmp	r3, r2
 8000960:	d025      	beq.n	80009ae <HAL_GPIO_Init+0x222>
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	4a4f      	ldr	r2, [pc, #316]	; (8000aa4 <HAL_GPIO_Init+0x318>)
 8000966:	4293      	cmp	r3, r2
 8000968:	d01f      	beq.n	80009aa <HAL_GPIO_Init+0x21e>
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	4a4e      	ldr	r2, [pc, #312]	; (8000aa8 <HAL_GPIO_Init+0x31c>)
 800096e:	4293      	cmp	r3, r2
 8000970:	d019      	beq.n	80009a6 <HAL_GPIO_Init+0x21a>
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	4a4d      	ldr	r2, [pc, #308]	; (8000aac <HAL_GPIO_Init+0x320>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d013      	beq.n	80009a2 <HAL_GPIO_Init+0x216>
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	4a4c      	ldr	r2, [pc, #304]	; (8000ab0 <HAL_GPIO_Init+0x324>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d00d      	beq.n	800099e <HAL_GPIO_Init+0x212>
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	4a4b      	ldr	r2, [pc, #300]	; (8000ab4 <HAL_GPIO_Init+0x328>)
 8000986:	4293      	cmp	r3, r2
 8000988:	d007      	beq.n	800099a <HAL_GPIO_Init+0x20e>
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	4a4a      	ldr	r2, [pc, #296]	; (8000ab8 <HAL_GPIO_Init+0x32c>)
 800098e:	4293      	cmp	r3, r2
 8000990:	d101      	bne.n	8000996 <HAL_GPIO_Init+0x20a>
 8000992:	2307      	movs	r3, #7
 8000994:	e00e      	b.n	80009b4 <HAL_GPIO_Init+0x228>
 8000996:	2308      	movs	r3, #8
 8000998:	e00c      	b.n	80009b4 <HAL_GPIO_Init+0x228>
 800099a:	2306      	movs	r3, #6
 800099c:	e00a      	b.n	80009b4 <HAL_GPIO_Init+0x228>
 800099e:	2305      	movs	r3, #5
 80009a0:	e008      	b.n	80009b4 <HAL_GPIO_Init+0x228>
 80009a2:	2304      	movs	r3, #4
 80009a4:	e006      	b.n	80009b4 <HAL_GPIO_Init+0x228>
 80009a6:	2303      	movs	r3, #3
 80009a8:	e004      	b.n	80009b4 <HAL_GPIO_Init+0x228>
 80009aa:	2302      	movs	r3, #2
 80009ac:	e002      	b.n	80009b4 <HAL_GPIO_Init+0x228>
 80009ae:	2301      	movs	r3, #1
 80009b0:	e000      	b.n	80009b4 <HAL_GPIO_Init+0x228>
 80009b2:	2300      	movs	r3, #0
 80009b4:	69fa      	ldr	r2, [r7, #28]
 80009b6:	f002 0203 	and.w	r2, r2, #3
 80009ba:	0092      	lsls	r2, r2, #2
 80009bc:	4093      	lsls	r3, r2
 80009be:	69ba      	ldr	r2, [r7, #24]
 80009c0:	4313      	orrs	r3, r2
 80009c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80009c4:	4934      	ldr	r1, [pc, #208]	; (8000a98 <HAL_GPIO_Init+0x30c>)
 80009c6:	69fb      	ldr	r3, [r7, #28]
 80009c8:	089b      	lsrs	r3, r3, #2
 80009ca:	3302      	adds	r3, #2
 80009cc:	69ba      	ldr	r2, [r7, #24]
 80009ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80009d2:	4b3a      	ldr	r3, [pc, #232]	; (8000abc <HAL_GPIO_Init+0x330>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80009d8:	693b      	ldr	r3, [r7, #16]
 80009da:	43db      	mvns	r3, r3
 80009dc:	69ba      	ldr	r2, [r7, #24]
 80009de:	4013      	ands	r3, r2
 80009e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	685b      	ldr	r3, [r3, #4]
 80009e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d003      	beq.n	80009f6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80009ee:	69ba      	ldr	r2, [r7, #24]
 80009f0:	693b      	ldr	r3, [r7, #16]
 80009f2:	4313      	orrs	r3, r2
 80009f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80009f6:	4a31      	ldr	r2, [pc, #196]	; (8000abc <HAL_GPIO_Init+0x330>)
 80009f8:	69bb      	ldr	r3, [r7, #24]
 80009fa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80009fc:	4b2f      	ldr	r3, [pc, #188]	; (8000abc <HAL_GPIO_Init+0x330>)
 80009fe:	685b      	ldr	r3, [r3, #4]
 8000a00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a02:	693b      	ldr	r3, [r7, #16]
 8000a04:	43db      	mvns	r3, r3
 8000a06:	69ba      	ldr	r2, [r7, #24]
 8000a08:	4013      	ands	r3, r2
 8000a0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	685b      	ldr	r3, [r3, #4]
 8000a10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d003      	beq.n	8000a20 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000a18:	69ba      	ldr	r2, [r7, #24]
 8000a1a:	693b      	ldr	r3, [r7, #16]
 8000a1c:	4313      	orrs	r3, r2
 8000a1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000a20:	4a26      	ldr	r2, [pc, #152]	; (8000abc <HAL_GPIO_Init+0x330>)
 8000a22:	69bb      	ldr	r3, [r7, #24]
 8000a24:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a26:	4b25      	ldr	r3, [pc, #148]	; (8000abc <HAL_GPIO_Init+0x330>)
 8000a28:	689b      	ldr	r3, [r3, #8]
 8000a2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a2c:	693b      	ldr	r3, [r7, #16]
 8000a2e:	43db      	mvns	r3, r3
 8000a30:	69ba      	ldr	r2, [r7, #24]
 8000a32:	4013      	ands	r3, r2
 8000a34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	685b      	ldr	r3, [r3, #4]
 8000a3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d003      	beq.n	8000a4a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000a42:	69ba      	ldr	r2, [r7, #24]
 8000a44:	693b      	ldr	r3, [r7, #16]
 8000a46:	4313      	orrs	r3, r2
 8000a48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000a4a:	4a1c      	ldr	r2, [pc, #112]	; (8000abc <HAL_GPIO_Init+0x330>)
 8000a4c:	69bb      	ldr	r3, [r7, #24]
 8000a4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000a50:	4b1a      	ldr	r3, [pc, #104]	; (8000abc <HAL_GPIO_Init+0x330>)
 8000a52:	68db      	ldr	r3, [r3, #12]
 8000a54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a56:	693b      	ldr	r3, [r7, #16]
 8000a58:	43db      	mvns	r3, r3
 8000a5a:	69ba      	ldr	r2, [r7, #24]
 8000a5c:	4013      	ands	r3, r2
 8000a5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	685b      	ldr	r3, [r3, #4]
 8000a64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d003      	beq.n	8000a74 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000a6c:	69ba      	ldr	r2, [r7, #24]
 8000a6e:	693b      	ldr	r3, [r7, #16]
 8000a70:	4313      	orrs	r3, r2
 8000a72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000a74:	4a11      	ldr	r2, [pc, #68]	; (8000abc <HAL_GPIO_Init+0x330>)
 8000a76:	69bb      	ldr	r3, [r7, #24]
 8000a78:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000a7a:	69fb      	ldr	r3, [r7, #28]
 8000a7c:	3301      	adds	r3, #1
 8000a7e:	61fb      	str	r3, [r7, #28]
 8000a80:	69fb      	ldr	r3, [r7, #28]
 8000a82:	2b0f      	cmp	r3, #15
 8000a84:	f67f ae90 	bls.w	80007a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000a88:	bf00      	nop
 8000a8a:	3724      	adds	r7, #36	; 0x24
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr
 8000a94:	40023800 	.word	0x40023800
 8000a98:	40013800 	.word	0x40013800
 8000a9c:	40020000 	.word	0x40020000
 8000aa0:	40020400 	.word	0x40020400
 8000aa4:	40020800 	.word	0x40020800
 8000aa8:	40020c00 	.word	0x40020c00
 8000aac:	40021000 	.word	0x40021000
 8000ab0:	40021400 	.word	0x40021400
 8000ab4:	40021800 	.word	0x40021800
 8000ab8:	40021c00 	.word	0x40021c00
 8000abc:	40013c00 	.word	0x40013c00

08000ac0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b083      	sub	sp, #12
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
 8000ac8:	460b      	mov	r3, r1
 8000aca:	807b      	strh	r3, [r7, #2]
 8000acc:	4613      	mov	r3, r2
 8000ace:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ad0:	787b      	ldrb	r3, [r7, #1]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d003      	beq.n	8000ade <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ad6:	887a      	ldrh	r2, [r7, #2]
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000adc:	e003      	b.n	8000ae6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000ade:	887b      	ldrh	r3, [r7, #2]
 8000ae0:	041a      	lsls	r2, r3, #16
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	619a      	str	r2, [r3, #24]
}
 8000ae6:	bf00      	nop
 8000ae8:	370c      	adds	r7, #12
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr

08000af2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000af2:	b480      	push	{r7}
 8000af4:	b083      	sub	sp, #12
 8000af6:	af00      	add	r7, sp, #0
 8000af8:	6078      	str	r0, [r7, #4]
 8000afa:	460b      	mov	r3, r1
 8000afc:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	695a      	ldr	r2, [r3, #20]
 8000b02:	887b      	ldrh	r3, [r7, #2]
 8000b04:	401a      	ands	r2, r3
 8000b06:	887b      	ldrh	r3, [r7, #2]
 8000b08:	429a      	cmp	r2, r3
 8000b0a:	d104      	bne.n	8000b16 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000b0c:	887b      	ldrh	r3, [r7, #2]
 8000b0e:	041a      	lsls	r2, r3, #16
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8000b14:	e002      	b.n	8000b1c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8000b16:	887a      	ldrh	r2, [r7, #2]
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	619a      	str	r2, [r3, #24]
}
 8000b1c:	bf00      	nop
 8000b1e:	370c      	adds	r7, #12
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr

08000b28 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b086      	sub	sp, #24
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d101      	bne.n	8000b3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000b36:	2301      	movs	r3, #1
 8000b38:	e25b      	b.n	8000ff2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	f003 0301 	and.w	r3, r3, #1
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d075      	beq.n	8000c32 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000b46:	4ba3      	ldr	r3, [pc, #652]	; (8000dd4 <HAL_RCC_OscConfig+0x2ac>)
 8000b48:	689b      	ldr	r3, [r3, #8]
 8000b4a:	f003 030c 	and.w	r3, r3, #12
 8000b4e:	2b04      	cmp	r3, #4
 8000b50:	d00c      	beq.n	8000b6c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000b52:	4ba0      	ldr	r3, [pc, #640]	; (8000dd4 <HAL_RCC_OscConfig+0x2ac>)
 8000b54:	689b      	ldr	r3, [r3, #8]
 8000b56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000b5a:	2b08      	cmp	r3, #8
 8000b5c:	d112      	bne.n	8000b84 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000b5e:	4b9d      	ldr	r3, [pc, #628]	; (8000dd4 <HAL_RCC_OscConfig+0x2ac>)
 8000b60:	685b      	ldr	r3, [r3, #4]
 8000b62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000b6a:	d10b      	bne.n	8000b84 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b6c:	4b99      	ldr	r3, [pc, #612]	; (8000dd4 <HAL_RCC_OscConfig+0x2ac>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d05b      	beq.n	8000c30 <HAL_RCC_OscConfig+0x108>
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	685b      	ldr	r3, [r3, #4]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d157      	bne.n	8000c30 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000b80:	2301      	movs	r3, #1
 8000b82:	e236      	b.n	8000ff2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	685b      	ldr	r3, [r3, #4]
 8000b88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b8c:	d106      	bne.n	8000b9c <HAL_RCC_OscConfig+0x74>
 8000b8e:	4a91      	ldr	r2, [pc, #580]	; (8000dd4 <HAL_RCC_OscConfig+0x2ac>)
 8000b90:	4b90      	ldr	r3, [pc, #576]	; (8000dd4 <HAL_RCC_OscConfig+0x2ac>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b98:	6013      	str	r3, [r2, #0]
 8000b9a:	e01d      	b.n	8000bd8 <HAL_RCC_OscConfig+0xb0>
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	685b      	ldr	r3, [r3, #4]
 8000ba0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ba4:	d10c      	bne.n	8000bc0 <HAL_RCC_OscConfig+0x98>
 8000ba6:	4a8b      	ldr	r2, [pc, #556]	; (8000dd4 <HAL_RCC_OscConfig+0x2ac>)
 8000ba8:	4b8a      	ldr	r3, [pc, #552]	; (8000dd4 <HAL_RCC_OscConfig+0x2ac>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bb0:	6013      	str	r3, [r2, #0]
 8000bb2:	4a88      	ldr	r2, [pc, #544]	; (8000dd4 <HAL_RCC_OscConfig+0x2ac>)
 8000bb4:	4b87      	ldr	r3, [pc, #540]	; (8000dd4 <HAL_RCC_OscConfig+0x2ac>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bbc:	6013      	str	r3, [r2, #0]
 8000bbe:	e00b      	b.n	8000bd8 <HAL_RCC_OscConfig+0xb0>
 8000bc0:	4a84      	ldr	r2, [pc, #528]	; (8000dd4 <HAL_RCC_OscConfig+0x2ac>)
 8000bc2:	4b84      	ldr	r3, [pc, #528]	; (8000dd4 <HAL_RCC_OscConfig+0x2ac>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bca:	6013      	str	r3, [r2, #0]
 8000bcc:	4a81      	ldr	r2, [pc, #516]	; (8000dd4 <HAL_RCC_OscConfig+0x2ac>)
 8000bce:	4b81      	ldr	r3, [pc, #516]	; (8000dd4 <HAL_RCC_OscConfig+0x2ac>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d013      	beq.n	8000c08 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000be0:	f7ff fce4 	bl	80005ac <HAL_GetTick>
 8000be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000be6:	e008      	b.n	8000bfa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000be8:	f7ff fce0 	bl	80005ac <HAL_GetTick>
 8000bec:	4602      	mov	r2, r0
 8000bee:	693b      	ldr	r3, [r7, #16]
 8000bf0:	1ad3      	subs	r3, r2, r3
 8000bf2:	2b64      	cmp	r3, #100	; 0x64
 8000bf4:	d901      	bls.n	8000bfa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000bf6:	2303      	movs	r3, #3
 8000bf8:	e1fb      	b.n	8000ff2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bfa:	4b76      	ldr	r3, [pc, #472]	; (8000dd4 <HAL_RCC_OscConfig+0x2ac>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d0f0      	beq.n	8000be8 <HAL_RCC_OscConfig+0xc0>
 8000c06:	e014      	b.n	8000c32 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c08:	f7ff fcd0 	bl	80005ac <HAL_GetTick>
 8000c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c0e:	e008      	b.n	8000c22 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c10:	f7ff fccc 	bl	80005ac <HAL_GetTick>
 8000c14:	4602      	mov	r2, r0
 8000c16:	693b      	ldr	r3, [r7, #16]
 8000c18:	1ad3      	subs	r3, r2, r3
 8000c1a:	2b64      	cmp	r3, #100	; 0x64
 8000c1c:	d901      	bls.n	8000c22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000c1e:	2303      	movs	r3, #3
 8000c20:	e1e7      	b.n	8000ff2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c22:	4b6c      	ldr	r3, [pc, #432]	; (8000dd4 <HAL_RCC_OscConfig+0x2ac>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d1f0      	bne.n	8000c10 <HAL_RCC_OscConfig+0xe8>
 8000c2e:	e000      	b.n	8000c32 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	f003 0302 	and.w	r3, r3, #2
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d063      	beq.n	8000d06 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000c3e:	4b65      	ldr	r3, [pc, #404]	; (8000dd4 <HAL_RCC_OscConfig+0x2ac>)
 8000c40:	689b      	ldr	r3, [r3, #8]
 8000c42:	f003 030c 	and.w	r3, r3, #12
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d00b      	beq.n	8000c62 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000c4a:	4b62      	ldr	r3, [pc, #392]	; (8000dd4 <HAL_RCC_OscConfig+0x2ac>)
 8000c4c:	689b      	ldr	r3, [r3, #8]
 8000c4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000c52:	2b08      	cmp	r3, #8
 8000c54:	d11c      	bne.n	8000c90 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000c56:	4b5f      	ldr	r3, [pc, #380]	; (8000dd4 <HAL_RCC_OscConfig+0x2ac>)
 8000c58:	685b      	ldr	r3, [r3, #4]
 8000c5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d116      	bne.n	8000c90 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c62:	4b5c      	ldr	r3, [pc, #368]	; (8000dd4 <HAL_RCC_OscConfig+0x2ac>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	f003 0302 	and.w	r3, r3, #2
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d005      	beq.n	8000c7a <HAL_RCC_OscConfig+0x152>
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	68db      	ldr	r3, [r3, #12]
 8000c72:	2b01      	cmp	r3, #1
 8000c74:	d001      	beq.n	8000c7a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000c76:	2301      	movs	r3, #1
 8000c78:	e1bb      	b.n	8000ff2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c7a:	4956      	ldr	r1, [pc, #344]	; (8000dd4 <HAL_RCC_OscConfig+0x2ac>)
 8000c7c:	4b55      	ldr	r3, [pc, #340]	; (8000dd4 <HAL_RCC_OscConfig+0x2ac>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	691b      	ldr	r3, [r3, #16]
 8000c88:	00db      	lsls	r3, r3, #3
 8000c8a:	4313      	orrs	r3, r2
 8000c8c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c8e:	e03a      	b.n	8000d06 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	68db      	ldr	r3, [r3, #12]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d020      	beq.n	8000cda <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000c98:	4b4f      	ldr	r3, [pc, #316]	; (8000dd8 <HAL_RCC_OscConfig+0x2b0>)
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c9e:	f7ff fc85 	bl	80005ac <HAL_GetTick>
 8000ca2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ca4:	e008      	b.n	8000cb8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ca6:	f7ff fc81 	bl	80005ac <HAL_GetTick>
 8000caa:	4602      	mov	r2, r0
 8000cac:	693b      	ldr	r3, [r7, #16]
 8000cae:	1ad3      	subs	r3, r2, r3
 8000cb0:	2b02      	cmp	r3, #2
 8000cb2:	d901      	bls.n	8000cb8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000cb4:	2303      	movs	r3, #3
 8000cb6:	e19c      	b.n	8000ff2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cb8:	4b46      	ldr	r3, [pc, #280]	; (8000dd4 <HAL_RCC_OscConfig+0x2ac>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	f003 0302 	and.w	r3, r3, #2
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d0f0      	beq.n	8000ca6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cc4:	4943      	ldr	r1, [pc, #268]	; (8000dd4 <HAL_RCC_OscConfig+0x2ac>)
 8000cc6:	4b43      	ldr	r3, [pc, #268]	; (8000dd4 <HAL_RCC_OscConfig+0x2ac>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	691b      	ldr	r3, [r3, #16]
 8000cd2:	00db      	lsls	r3, r3, #3
 8000cd4:	4313      	orrs	r3, r2
 8000cd6:	600b      	str	r3, [r1, #0]
 8000cd8:	e015      	b.n	8000d06 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000cda:	4b3f      	ldr	r3, [pc, #252]	; (8000dd8 <HAL_RCC_OscConfig+0x2b0>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ce0:	f7ff fc64 	bl	80005ac <HAL_GetTick>
 8000ce4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ce6:	e008      	b.n	8000cfa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ce8:	f7ff fc60 	bl	80005ac <HAL_GetTick>
 8000cec:	4602      	mov	r2, r0
 8000cee:	693b      	ldr	r3, [r7, #16]
 8000cf0:	1ad3      	subs	r3, r2, r3
 8000cf2:	2b02      	cmp	r3, #2
 8000cf4:	d901      	bls.n	8000cfa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000cf6:	2303      	movs	r3, #3
 8000cf8:	e17b      	b.n	8000ff2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000cfa:	4b36      	ldr	r3, [pc, #216]	; (8000dd4 <HAL_RCC_OscConfig+0x2ac>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	f003 0302 	and.w	r3, r3, #2
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d1f0      	bne.n	8000ce8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	f003 0308 	and.w	r3, r3, #8
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d030      	beq.n	8000d74 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	695b      	ldr	r3, [r3, #20]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d016      	beq.n	8000d48 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d1a:	4b30      	ldr	r3, [pc, #192]	; (8000ddc <HAL_RCC_OscConfig+0x2b4>)
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000d20:	f7ff fc44 	bl	80005ac <HAL_GetTick>
 8000d24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d26:	e008      	b.n	8000d3a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d28:	f7ff fc40 	bl	80005ac <HAL_GetTick>
 8000d2c:	4602      	mov	r2, r0
 8000d2e:	693b      	ldr	r3, [r7, #16]
 8000d30:	1ad3      	subs	r3, r2, r3
 8000d32:	2b02      	cmp	r3, #2
 8000d34:	d901      	bls.n	8000d3a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000d36:	2303      	movs	r3, #3
 8000d38:	e15b      	b.n	8000ff2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d3a:	4b26      	ldr	r3, [pc, #152]	; (8000dd4 <HAL_RCC_OscConfig+0x2ac>)
 8000d3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d3e:	f003 0302 	and.w	r3, r3, #2
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d0f0      	beq.n	8000d28 <HAL_RCC_OscConfig+0x200>
 8000d46:	e015      	b.n	8000d74 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000d48:	4b24      	ldr	r3, [pc, #144]	; (8000ddc <HAL_RCC_OscConfig+0x2b4>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d4e:	f7ff fc2d 	bl	80005ac <HAL_GetTick>
 8000d52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d54:	e008      	b.n	8000d68 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d56:	f7ff fc29 	bl	80005ac <HAL_GetTick>
 8000d5a:	4602      	mov	r2, r0
 8000d5c:	693b      	ldr	r3, [r7, #16]
 8000d5e:	1ad3      	subs	r3, r2, r3
 8000d60:	2b02      	cmp	r3, #2
 8000d62:	d901      	bls.n	8000d68 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8000d64:	2303      	movs	r3, #3
 8000d66:	e144      	b.n	8000ff2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d68:	4b1a      	ldr	r3, [pc, #104]	; (8000dd4 <HAL_RCC_OscConfig+0x2ac>)
 8000d6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d6c:	f003 0302 	and.w	r3, r3, #2
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d1f0      	bne.n	8000d56 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	f003 0304 	and.w	r3, r3, #4
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	f000 80a0 	beq.w	8000ec2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000d82:	2300      	movs	r3, #0
 8000d84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d86:	4b13      	ldr	r3, [pc, #76]	; (8000dd4 <HAL_RCC_OscConfig+0x2ac>)
 8000d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d10f      	bne.n	8000db2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d92:	2300      	movs	r3, #0
 8000d94:	60bb      	str	r3, [r7, #8]
 8000d96:	4a0f      	ldr	r2, [pc, #60]	; (8000dd4 <HAL_RCC_OscConfig+0x2ac>)
 8000d98:	4b0e      	ldr	r3, [pc, #56]	; (8000dd4 <HAL_RCC_OscConfig+0x2ac>)
 8000d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000da0:	6413      	str	r3, [r2, #64]	; 0x40
 8000da2:	4b0c      	ldr	r3, [pc, #48]	; (8000dd4 <HAL_RCC_OscConfig+0x2ac>)
 8000da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000daa:	60bb      	str	r3, [r7, #8]
 8000dac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000dae:	2301      	movs	r3, #1
 8000db0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000db2:	4b0b      	ldr	r3, [pc, #44]	; (8000de0 <HAL_RCC_OscConfig+0x2b8>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d121      	bne.n	8000e02 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000dbe:	4a08      	ldr	r2, [pc, #32]	; (8000de0 <HAL_RCC_OscConfig+0x2b8>)
 8000dc0:	4b07      	ldr	r3, [pc, #28]	; (8000de0 <HAL_RCC_OscConfig+0x2b8>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dc8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000dca:	f7ff fbef 	bl	80005ac <HAL_GetTick>
 8000dce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000dd0:	e011      	b.n	8000df6 <HAL_RCC_OscConfig+0x2ce>
 8000dd2:	bf00      	nop
 8000dd4:	40023800 	.word	0x40023800
 8000dd8:	42470000 	.word	0x42470000
 8000ddc:	42470e80 	.word	0x42470e80
 8000de0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000de4:	f7ff fbe2 	bl	80005ac <HAL_GetTick>
 8000de8:	4602      	mov	r2, r0
 8000dea:	693b      	ldr	r3, [r7, #16]
 8000dec:	1ad3      	subs	r3, r2, r3
 8000dee:	2b02      	cmp	r3, #2
 8000df0:	d901      	bls.n	8000df6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8000df2:	2303      	movs	r3, #3
 8000df4:	e0fd      	b.n	8000ff2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000df6:	4b81      	ldr	r3, [pc, #516]	; (8000ffc <HAL_RCC_OscConfig+0x4d4>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d0f0      	beq.n	8000de4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	689b      	ldr	r3, [r3, #8]
 8000e06:	2b01      	cmp	r3, #1
 8000e08:	d106      	bne.n	8000e18 <HAL_RCC_OscConfig+0x2f0>
 8000e0a:	4a7d      	ldr	r2, [pc, #500]	; (8001000 <HAL_RCC_OscConfig+0x4d8>)
 8000e0c:	4b7c      	ldr	r3, [pc, #496]	; (8001000 <HAL_RCC_OscConfig+0x4d8>)
 8000e0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e10:	f043 0301 	orr.w	r3, r3, #1
 8000e14:	6713      	str	r3, [r2, #112]	; 0x70
 8000e16:	e01c      	b.n	8000e52 <HAL_RCC_OscConfig+0x32a>
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	689b      	ldr	r3, [r3, #8]
 8000e1c:	2b05      	cmp	r3, #5
 8000e1e:	d10c      	bne.n	8000e3a <HAL_RCC_OscConfig+0x312>
 8000e20:	4a77      	ldr	r2, [pc, #476]	; (8001000 <HAL_RCC_OscConfig+0x4d8>)
 8000e22:	4b77      	ldr	r3, [pc, #476]	; (8001000 <HAL_RCC_OscConfig+0x4d8>)
 8000e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e26:	f043 0304 	orr.w	r3, r3, #4
 8000e2a:	6713      	str	r3, [r2, #112]	; 0x70
 8000e2c:	4a74      	ldr	r2, [pc, #464]	; (8001000 <HAL_RCC_OscConfig+0x4d8>)
 8000e2e:	4b74      	ldr	r3, [pc, #464]	; (8001000 <HAL_RCC_OscConfig+0x4d8>)
 8000e30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e32:	f043 0301 	orr.w	r3, r3, #1
 8000e36:	6713      	str	r3, [r2, #112]	; 0x70
 8000e38:	e00b      	b.n	8000e52 <HAL_RCC_OscConfig+0x32a>
 8000e3a:	4a71      	ldr	r2, [pc, #452]	; (8001000 <HAL_RCC_OscConfig+0x4d8>)
 8000e3c:	4b70      	ldr	r3, [pc, #448]	; (8001000 <HAL_RCC_OscConfig+0x4d8>)
 8000e3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e40:	f023 0301 	bic.w	r3, r3, #1
 8000e44:	6713      	str	r3, [r2, #112]	; 0x70
 8000e46:	4a6e      	ldr	r2, [pc, #440]	; (8001000 <HAL_RCC_OscConfig+0x4d8>)
 8000e48:	4b6d      	ldr	r3, [pc, #436]	; (8001000 <HAL_RCC_OscConfig+0x4d8>)
 8000e4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e4c:	f023 0304 	bic.w	r3, r3, #4
 8000e50:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	689b      	ldr	r3, [r3, #8]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d015      	beq.n	8000e86 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e5a:	f7ff fba7 	bl	80005ac <HAL_GetTick>
 8000e5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e60:	e00a      	b.n	8000e78 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e62:	f7ff fba3 	bl	80005ac <HAL_GetTick>
 8000e66:	4602      	mov	r2, r0
 8000e68:	693b      	ldr	r3, [r7, #16]
 8000e6a:	1ad3      	subs	r3, r2, r3
 8000e6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e70:	4293      	cmp	r3, r2
 8000e72:	d901      	bls.n	8000e78 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8000e74:	2303      	movs	r3, #3
 8000e76:	e0bc      	b.n	8000ff2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e78:	4b61      	ldr	r3, [pc, #388]	; (8001000 <HAL_RCC_OscConfig+0x4d8>)
 8000e7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e7c:	f003 0302 	and.w	r3, r3, #2
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d0ee      	beq.n	8000e62 <HAL_RCC_OscConfig+0x33a>
 8000e84:	e014      	b.n	8000eb0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e86:	f7ff fb91 	bl	80005ac <HAL_GetTick>
 8000e8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e8c:	e00a      	b.n	8000ea4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e8e:	f7ff fb8d 	bl	80005ac <HAL_GetTick>
 8000e92:	4602      	mov	r2, r0
 8000e94:	693b      	ldr	r3, [r7, #16]
 8000e96:	1ad3      	subs	r3, r2, r3
 8000e98:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e9c:	4293      	cmp	r3, r2
 8000e9e:	d901      	bls.n	8000ea4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8000ea0:	2303      	movs	r3, #3
 8000ea2:	e0a6      	b.n	8000ff2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ea4:	4b56      	ldr	r3, [pc, #344]	; (8001000 <HAL_RCC_OscConfig+0x4d8>)
 8000ea6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ea8:	f003 0302 	and.w	r3, r3, #2
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d1ee      	bne.n	8000e8e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000eb0:	7dfb      	ldrb	r3, [r7, #23]
 8000eb2:	2b01      	cmp	r3, #1
 8000eb4:	d105      	bne.n	8000ec2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000eb6:	4a52      	ldr	r2, [pc, #328]	; (8001000 <HAL_RCC_OscConfig+0x4d8>)
 8000eb8:	4b51      	ldr	r3, [pc, #324]	; (8001000 <HAL_RCC_OscConfig+0x4d8>)
 8000eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ebc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000ec0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	699b      	ldr	r3, [r3, #24]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	f000 8092 	beq.w	8000ff0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000ecc:	4b4c      	ldr	r3, [pc, #304]	; (8001000 <HAL_RCC_OscConfig+0x4d8>)
 8000ece:	689b      	ldr	r3, [r3, #8]
 8000ed0:	f003 030c 	and.w	r3, r3, #12
 8000ed4:	2b08      	cmp	r3, #8
 8000ed6:	d05c      	beq.n	8000f92 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	699b      	ldr	r3, [r3, #24]
 8000edc:	2b02      	cmp	r3, #2
 8000ede:	d141      	bne.n	8000f64 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000ee0:	4b48      	ldr	r3, [pc, #288]	; (8001004 <HAL_RCC_OscConfig+0x4dc>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ee6:	f7ff fb61 	bl	80005ac <HAL_GetTick>
 8000eea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000eec:	e008      	b.n	8000f00 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000eee:	f7ff fb5d 	bl	80005ac <HAL_GetTick>
 8000ef2:	4602      	mov	r2, r0
 8000ef4:	693b      	ldr	r3, [r7, #16]
 8000ef6:	1ad3      	subs	r3, r2, r3
 8000ef8:	2b02      	cmp	r3, #2
 8000efa:	d901      	bls.n	8000f00 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8000efc:	2303      	movs	r3, #3
 8000efe:	e078      	b.n	8000ff2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f00:	4b3f      	ldr	r3, [pc, #252]	; (8001000 <HAL_RCC_OscConfig+0x4d8>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d1f0      	bne.n	8000eee <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000f0c:	493c      	ldr	r1, [pc, #240]	; (8001000 <HAL_RCC_OscConfig+0x4d8>)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	69da      	ldr	r2, [r3, #28]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6a1b      	ldr	r3, [r3, #32]
 8000f16:	431a      	orrs	r2, r3
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f1c:	019b      	lsls	r3, r3, #6
 8000f1e:	431a      	orrs	r2, r3
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f24:	085b      	lsrs	r3, r3, #1
 8000f26:	3b01      	subs	r3, #1
 8000f28:	041b      	lsls	r3, r3, #16
 8000f2a:	431a      	orrs	r2, r3
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f30:	061b      	lsls	r3, r3, #24
 8000f32:	4313      	orrs	r3, r2
 8000f34:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000f36:	4b33      	ldr	r3, [pc, #204]	; (8001004 <HAL_RCC_OscConfig+0x4dc>)
 8000f38:	2201      	movs	r2, #1
 8000f3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f3c:	f7ff fb36 	bl	80005ac <HAL_GetTick>
 8000f40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f42:	e008      	b.n	8000f56 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f44:	f7ff fb32 	bl	80005ac <HAL_GetTick>
 8000f48:	4602      	mov	r2, r0
 8000f4a:	693b      	ldr	r3, [r7, #16]
 8000f4c:	1ad3      	subs	r3, r2, r3
 8000f4e:	2b02      	cmp	r3, #2
 8000f50:	d901      	bls.n	8000f56 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8000f52:	2303      	movs	r3, #3
 8000f54:	e04d      	b.n	8000ff2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f56:	4b2a      	ldr	r3, [pc, #168]	; (8001000 <HAL_RCC_OscConfig+0x4d8>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d0f0      	beq.n	8000f44 <HAL_RCC_OscConfig+0x41c>
 8000f62:	e045      	b.n	8000ff0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f64:	4b27      	ldr	r3, [pc, #156]	; (8001004 <HAL_RCC_OscConfig+0x4dc>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f6a:	f7ff fb1f 	bl	80005ac <HAL_GetTick>
 8000f6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f70:	e008      	b.n	8000f84 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f72:	f7ff fb1b 	bl	80005ac <HAL_GetTick>
 8000f76:	4602      	mov	r2, r0
 8000f78:	693b      	ldr	r3, [r7, #16]
 8000f7a:	1ad3      	subs	r3, r2, r3
 8000f7c:	2b02      	cmp	r3, #2
 8000f7e:	d901      	bls.n	8000f84 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8000f80:	2303      	movs	r3, #3
 8000f82:	e036      	b.n	8000ff2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f84:	4b1e      	ldr	r3, [pc, #120]	; (8001000 <HAL_RCC_OscConfig+0x4d8>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d1f0      	bne.n	8000f72 <HAL_RCC_OscConfig+0x44a>
 8000f90:	e02e      	b.n	8000ff0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	699b      	ldr	r3, [r3, #24]
 8000f96:	2b01      	cmp	r3, #1
 8000f98:	d101      	bne.n	8000f9e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	e029      	b.n	8000ff2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8000f9e:	4b18      	ldr	r3, [pc, #96]	; (8001000 <HAL_RCC_OscConfig+0x4d8>)
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	69db      	ldr	r3, [r3, #28]
 8000fae:	429a      	cmp	r2, r3
 8000fb0:	d11c      	bne.n	8000fec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000fbc:	429a      	cmp	r2, r3
 8000fbe:	d115      	bne.n	8000fec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8000fc0:	68fa      	ldr	r2, [r7, #12]
 8000fc2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	687a      	ldr	r2, [r7, #4]
 8000fca:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d10d      	bne.n	8000fec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8000fda:	429a      	cmp	r2, r3
 8000fdc:	d106      	bne.n	8000fec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	d001      	beq.n	8000ff0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8000fec:	2301      	movs	r3, #1
 8000fee:	e000      	b.n	8000ff2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8000ff0:	2300      	movs	r3, #0
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3718      	adds	r7, #24
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	40007000 	.word	0x40007000
 8001000:	40023800 	.word	0x40023800
 8001004:	42470060 	.word	0x42470060

08001008 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d101      	bne.n	800101c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001018:	2301      	movs	r3, #1
 800101a:	e0cc      	b.n	80011b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800101c:	4b68      	ldr	r3, [pc, #416]	; (80011c0 <HAL_RCC_ClockConfig+0x1b8>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f003 020f 	and.w	r2, r3, #15
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	429a      	cmp	r2, r3
 8001028:	d20c      	bcs.n	8001044 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800102a:	4b65      	ldr	r3, [pc, #404]	; (80011c0 <HAL_RCC_ClockConfig+0x1b8>)
 800102c:	683a      	ldr	r2, [r7, #0]
 800102e:	b2d2      	uxtb	r2, r2
 8001030:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001032:	4b63      	ldr	r3, [pc, #396]	; (80011c0 <HAL_RCC_ClockConfig+0x1b8>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f003 020f 	and.w	r2, r3, #15
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	429a      	cmp	r2, r3
 800103e:	d001      	beq.n	8001044 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001040:	2301      	movs	r3, #1
 8001042:	e0b8      	b.n	80011b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f003 0302 	and.w	r3, r3, #2
 800104c:	2b00      	cmp	r3, #0
 800104e:	d020      	beq.n	8001092 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f003 0304 	and.w	r3, r3, #4
 8001058:	2b00      	cmp	r3, #0
 800105a:	d005      	beq.n	8001068 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800105c:	4a59      	ldr	r2, [pc, #356]	; (80011c4 <HAL_RCC_ClockConfig+0x1bc>)
 800105e:	4b59      	ldr	r3, [pc, #356]	; (80011c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001060:	689b      	ldr	r3, [r3, #8]
 8001062:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001066:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f003 0308 	and.w	r3, r3, #8
 8001070:	2b00      	cmp	r3, #0
 8001072:	d005      	beq.n	8001080 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001074:	4a53      	ldr	r2, [pc, #332]	; (80011c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001076:	4b53      	ldr	r3, [pc, #332]	; (80011c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001078:	689b      	ldr	r3, [r3, #8]
 800107a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800107e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001080:	4950      	ldr	r1, [pc, #320]	; (80011c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001082:	4b50      	ldr	r3, [pc, #320]	; (80011c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001084:	689b      	ldr	r3, [r3, #8]
 8001086:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	689b      	ldr	r3, [r3, #8]
 800108e:	4313      	orrs	r3, r2
 8001090:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f003 0301 	and.w	r3, r3, #1
 800109a:	2b00      	cmp	r3, #0
 800109c:	d044      	beq.n	8001128 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	d107      	bne.n	80010b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010a6:	4b47      	ldr	r3, [pc, #284]	; (80011c4 <HAL_RCC_ClockConfig+0x1bc>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d119      	bne.n	80010e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010b2:	2301      	movs	r3, #1
 80010b4:	e07f      	b.n	80011b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	2b02      	cmp	r3, #2
 80010bc:	d003      	beq.n	80010c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80010c2:	2b03      	cmp	r3, #3
 80010c4:	d107      	bne.n	80010d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010c6:	4b3f      	ldr	r3, [pc, #252]	; (80011c4 <HAL_RCC_ClockConfig+0x1bc>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d109      	bne.n	80010e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010d2:	2301      	movs	r3, #1
 80010d4:	e06f      	b.n	80011b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010d6:	4b3b      	ldr	r3, [pc, #236]	; (80011c4 <HAL_RCC_ClockConfig+0x1bc>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f003 0302 	and.w	r3, r3, #2
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d101      	bne.n	80010e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010e2:	2301      	movs	r3, #1
 80010e4:	e067      	b.n	80011b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80010e6:	4937      	ldr	r1, [pc, #220]	; (80011c4 <HAL_RCC_ClockConfig+0x1bc>)
 80010e8:	4b36      	ldr	r3, [pc, #216]	; (80011c4 <HAL_RCC_ClockConfig+0x1bc>)
 80010ea:	689b      	ldr	r3, [r3, #8]
 80010ec:	f023 0203 	bic.w	r2, r3, #3
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	4313      	orrs	r3, r2
 80010f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80010f8:	f7ff fa58 	bl	80005ac <HAL_GetTick>
 80010fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010fe:	e00a      	b.n	8001116 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001100:	f7ff fa54 	bl	80005ac <HAL_GetTick>
 8001104:	4602      	mov	r2, r0
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	1ad3      	subs	r3, r2, r3
 800110a:	f241 3288 	movw	r2, #5000	; 0x1388
 800110e:	4293      	cmp	r3, r2
 8001110:	d901      	bls.n	8001116 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001112:	2303      	movs	r3, #3
 8001114:	e04f      	b.n	80011b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001116:	4b2b      	ldr	r3, [pc, #172]	; (80011c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001118:	689b      	ldr	r3, [r3, #8]
 800111a:	f003 020c 	and.w	r2, r3, #12
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	009b      	lsls	r3, r3, #2
 8001124:	429a      	cmp	r2, r3
 8001126:	d1eb      	bne.n	8001100 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001128:	4b25      	ldr	r3, [pc, #148]	; (80011c0 <HAL_RCC_ClockConfig+0x1b8>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f003 020f 	and.w	r2, r3, #15
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	429a      	cmp	r2, r3
 8001134:	d90c      	bls.n	8001150 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001136:	4b22      	ldr	r3, [pc, #136]	; (80011c0 <HAL_RCC_ClockConfig+0x1b8>)
 8001138:	683a      	ldr	r2, [r7, #0]
 800113a:	b2d2      	uxtb	r2, r2
 800113c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800113e:	4b20      	ldr	r3, [pc, #128]	; (80011c0 <HAL_RCC_ClockConfig+0x1b8>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f003 020f 	and.w	r2, r3, #15
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	429a      	cmp	r2, r3
 800114a:	d001      	beq.n	8001150 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800114c:	2301      	movs	r3, #1
 800114e:	e032      	b.n	80011b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f003 0304 	and.w	r3, r3, #4
 8001158:	2b00      	cmp	r3, #0
 800115a:	d008      	beq.n	800116e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800115c:	4919      	ldr	r1, [pc, #100]	; (80011c4 <HAL_RCC_ClockConfig+0x1bc>)
 800115e:	4b19      	ldr	r3, [pc, #100]	; (80011c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001160:	689b      	ldr	r3, [r3, #8]
 8001162:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	68db      	ldr	r3, [r3, #12]
 800116a:	4313      	orrs	r3, r2
 800116c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f003 0308 	and.w	r3, r3, #8
 8001176:	2b00      	cmp	r3, #0
 8001178:	d009      	beq.n	800118e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800117a:	4912      	ldr	r1, [pc, #72]	; (80011c4 <HAL_RCC_ClockConfig+0x1bc>)
 800117c:	4b11      	ldr	r3, [pc, #68]	; (80011c4 <HAL_RCC_ClockConfig+0x1bc>)
 800117e:	689b      	ldr	r3, [r3, #8]
 8001180:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	691b      	ldr	r3, [r3, #16]
 8001188:	00db      	lsls	r3, r3, #3
 800118a:	4313      	orrs	r3, r2
 800118c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800118e:	f000 f821 	bl	80011d4 <HAL_RCC_GetSysClockFreq>
 8001192:	4601      	mov	r1, r0
 8001194:	4b0b      	ldr	r3, [pc, #44]	; (80011c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001196:	689b      	ldr	r3, [r3, #8]
 8001198:	091b      	lsrs	r3, r3, #4
 800119a:	f003 030f 	and.w	r3, r3, #15
 800119e:	4a0a      	ldr	r2, [pc, #40]	; (80011c8 <HAL_RCC_ClockConfig+0x1c0>)
 80011a0:	5cd3      	ldrb	r3, [r2, r3]
 80011a2:	fa21 f303 	lsr.w	r3, r1, r3
 80011a6:	4a09      	ldr	r2, [pc, #36]	; (80011cc <HAL_RCC_ClockConfig+0x1c4>)
 80011a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80011aa:	4b09      	ldr	r3, [pc, #36]	; (80011d0 <HAL_RCC_ClockConfig+0x1c8>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4618      	mov	r0, r3
 80011b0:	f7ff f9b8 	bl	8000524 <HAL_InitTick>

  return HAL_OK;
 80011b4:	2300      	movs	r3, #0
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3710      	adds	r7, #16
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	40023c00 	.word	0x40023c00
 80011c4:	40023800 	.word	0x40023800
 80011c8:	08002cc4 	.word	0x08002cc4
 80011cc:	2000000c 	.word	0x2000000c
 80011d0:	20000000 	.word	0x20000000

080011d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80011d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80011d8:	b08f      	sub	sp, #60	; 0x3c
 80011da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80011dc:	2300      	movs	r3, #0
 80011de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80011e0:	2300      	movs	r3, #0
 80011e2:	637b      	str	r3, [r7, #52]	; 0x34
 80011e4:	2300      	movs	r3, #0
 80011e6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t sysclockfreq = 0U;
 80011e8:	2300      	movs	r3, #0
 80011ea:	633b      	str	r3, [r7, #48]	; 0x30

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80011ec:	4b62      	ldr	r3, [pc, #392]	; (8001378 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80011ee:	689b      	ldr	r3, [r3, #8]
 80011f0:	f003 030c 	and.w	r3, r3, #12
 80011f4:	2b04      	cmp	r3, #4
 80011f6:	d007      	beq.n	8001208 <HAL_RCC_GetSysClockFreq+0x34>
 80011f8:	2b08      	cmp	r3, #8
 80011fa:	d008      	beq.n	800120e <HAL_RCC_GetSysClockFreq+0x3a>
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	f040 80b2 	bne.w	8001366 <HAL_RCC_GetSysClockFreq+0x192>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001202:	4b5e      	ldr	r3, [pc, #376]	; (800137c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001204:	633b      	str	r3, [r7, #48]	; 0x30
       break;
 8001206:	e0b1      	b.n	800136c <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001208:	4b5c      	ldr	r3, [pc, #368]	; (800137c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800120a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800120c:	e0ae      	b.n	800136c <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800120e:	4b5a      	ldr	r3, [pc, #360]	; (8001378 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001216:	62fb      	str	r3, [r7, #44]	; 0x2c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001218:	4b57      	ldr	r3, [pc, #348]	; (8001378 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001220:	2b00      	cmp	r3, #0
 8001222:	d04e      	beq.n	80012c2 <HAL_RCC_GetSysClockFreq+0xee>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001224:	4b54      	ldr	r3, [pc, #336]	; (8001378 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	099b      	lsrs	r3, r3, #6
 800122a:	f04f 0400 	mov.w	r4, #0
 800122e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001232:	f04f 0200 	mov.w	r2, #0
 8001236:	ea01 0103 	and.w	r1, r1, r3
 800123a:	ea02 0204 	and.w	r2, r2, r4
 800123e:	460b      	mov	r3, r1
 8001240:	4614      	mov	r4, r2
 8001242:	0160      	lsls	r0, r4, #5
 8001244:	6278      	str	r0, [r7, #36]	; 0x24
 8001246:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001248:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 800124c:	6278      	str	r0, [r7, #36]	; 0x24
 800124e:	015b      	lsls	r3, r3, #5
 8001250:	623b      	str	r3, [r7, #32]
 8001252:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001256:	1a5b      	subs	r3, r3, r1
 8001258:	eb64 0402 	sbc.w	r4, r4, r2
 800125c:	ea4f 1984 	mov.w	r9, r4, lsl #6
 8001260:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 8001264:	ea4f 1883 	mov.w	r8, r3, lsl #6
 8001268:	ebb8 0803 	subs.w	r8, r8, r3
 800126c:	eb69 0904 	sbc.w	r9, r9, r4
 8001270:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001274:	61fb      	str	r3, [r7, #28]
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800127c:	61fb      	str	r3, [r7, #28]
 800127e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8001282:	61bb      	str	r3, [r7, #24]
 8001284:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001288:	eb18 0801 	adds.w	r8, r8, r1
 800128c:	eb49 0902 	adc.w	r9, r9, r2
 8001290:	ea4f 2389 	mov.w	r3, r9, lsl #10
 8001294:	617b      	str	r3, [r7, #20]
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	ea43 5398 	orr.w	r3, r3, r8, lsr #22
 800129c:	617b      	str	r3, [r7, #20]
 800129e:	ea4f 2388 	mov.w	r3, r8, lsl #10
 80012a2:	613b      	str	r3, [r7, #16]
 80012a4:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80012a8:	4640      	mov	r0, r8
 80012aa:	4649      	mov	r1, r9
 80012ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012ae:	f04f 0400 	mov.w	r4, #0
 80012b2:	461a      	mov	r2, r3
 80012b4:	4623      	mov	r3, r4
 80012b6:	f7fe ff8b 	bl	80001d0 <__aeabi_uldivmod>
 80012ba:	4603      	mov	r3, r0
 80012bc:	460c      	mov	r4, r1
 80012be:	637b      	str	r3, [r7, #52]	; 0x34
 80012c0:	e043      	b.n	800134a <HAL_RCC_GetSysClockFreq+0x176>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80012c2:	4b2d      	ldr	r3, [pc, #180]	; (8001378 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	099b      	lsrs	r3, r3, #6
 80012c8:	f04f 0400 	mov.w	r4, #0
 80012cc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80012d0:	f04f 0200 	mov.w	r2, #0
 80012d4:	ea01 0103 	and.w	r1, r1, r3
 80012d8:	ea02 0204 	and.w	r2, r2, r4
 80012dc:	460b      	mov	r3, r1
 80012de:	4614      	mov	r4, r2
 80012e0:	0160      	lsls	r0, r4, #5
 80012e2:	60f8      	str	r0, [r7, #12]
 80012e4:	68f8      	ldr	r0, [r7, #12]
 80012e6:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 80012ea:	60f8      	str	r0, [r7, #12]
 80012ec:	015b      	lsls	r3, r3, #5
 80012ee:	60bb      	str	r3, [r7, #8]
 80012f0:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80012f4:	1a5b      	subs	r3, r3, r1
 80012f6:	eb64 0402 	sbc.w	r4, r4, r2
 80012fa:	01a6      	lsls	r6, r4, #6
 80012fc:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 8001300:	019d      	lsls	r5, r3, #6
 8001302:	1aed      	subs	r5, r5, r3
 8001304:	eb66 0604 	sbc.w	r6, r6, r4
 8001308:	00f3      	lsls	r3, r6, #3
 800130a:	607b      	str	r3, [r7, #4]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8001312:	607b      	str	r3, [r7, #4]
 8001314:	00eb      	lsls	r3, r5, #3
 8001316:	603b      	str	r3, [r7, #0]
 8001318:	e897 0060 	ldmia.w	r7, {r5, r6}
 800131c:	186d      	adds	r5, r5, r1
 800131e:	eb46 0602 	adc.w	r6, r6, r2
 8001322:	ea4f 2b86 	mov.w	fp, r6, lsl #10
 8001326:	ea4b 5b95 	orr.w	fp, fp, r5, lsr #22
 800132a:	ea4f 2a85 	mov.w	sl, r5, lsl #10
 800132e:	4655      	mov	r5, sl
 8001330:	465e      	mov	r6, fp
 8001332:	4628      	mov	r0, r5
 8001334:	4631      	mov	r1, r6
 8001336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001338:	f04f 0400 	mov.w	r4, #0
 800133c:	461a      	mov	r2, r3
 800133e:	4623      	mov	r3, r4
 8001340:	f7fe ff46 	bl	80001d0 <__aeabi_uldivmod>
 8001344:	4603      	mov	r3, r0
 8001346:	460c      	mov	r4, r1
 8001348:	637b      	str	r3, [r7, #52]	; 0x34
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800134a:	4b0b      	ldr	r3, [pc, #44]	; (8001378 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	0c1b      	lsrs	r3, r3, #16
 8001350:	f003 0303 	and.w	r3, r3, #3
 8001354:	3301      	adds	r3, #1
 8001356:	005b      	lsls	r3, r3, #1
 8001358:	62bb      	str	r3, [r7, #40]	; 0x28

      sysclockfreq = pllvco/pllp;
 800135a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800135c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800135e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001362:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001364:	e002      	b.n	800136c <HAL_RCC_GetSysClockFreq+0x198>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001366:	4b05      	ldr	r3, [pc, #20]	; (800137c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001368:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800136a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800136c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800136e:	4618      	mov	r0, r3
 8001370:	373c      	adds	r7, #60	; 0x3c
 8001372:	46bd      	mov	sp, r7
 8001374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001378:	40023800 	.word	0x40023800
 800137c:	00f42400 	.word	0x00f42400

08001380 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8001380:	b480      	push	{r7}
 8001382:	b085      	sub	sp, #20
 8001384:	af00      	add	r7, sp, #0
 8001386:	4603      	mov	r3, r0
 8001388:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800138a:	2300      	movs	r3, #0
 800138c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800138e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001392:	2b84      	cmp	r3, #132	; 0x84
 8001394:	d005      	beq.n	80013a2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8001396:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	4413      	add	r3, r2
 800139e:	3303      	adds	r3, #3
 80013a0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80013a2:	68fb      	ldr	r3, [r7, #12]
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	3714      	adds	r7, #20
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr

080013b0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80013b4:	f000 feb8 	bl	8002128 <vTaskStartScheduler>
  
  return osOK;
 80013b8:	2300      	movs	r3, #0
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	bd80      	pop	{r7, pc}

080013be <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80013be:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013c0:	b089      	sub	sp, #36	; 0x24
 80013c2:	af04      	add	r7, sp, #16
 80013c4:	6078      	str	r0, [r7, #4]
 80013c6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	695b      	ldr	r3, [r3, #20]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d020      	beq.n	8001412 <osThreadCreate+0x54>
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	699b      	ldr	r3, [r3, #24]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d01c      	beq.n	8001412 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	685c      	ldr	r4, [r3, #4]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681d      	ldr	r5, [r3, #0]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	691e      	ldr	r6, [r3, #16]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80013ea:	4618      	mov	r0, r3
 80013ec:	f7ff ffc8 	bl	8001380 <makeFreeRtosPriority>
 80013f0:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	695b      	ldr	r3, [r3, #20]
 80013f6:	687a      	ldr	r2, [r7, #4]
 80013f8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80013fa:	9202      	str	r2, [sp, #8]
 80013fc:	9301      	str	r3, [sp, #4]
 80013fe:	9100      	str	r1, [sp, #0]
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	4632      	mov	r2, r6
 8001404:	4629      	mov	r1, r5
 8001406:	4620      	mov	r0, r4
 8001408:	f000 fcca 	bl	8001da0 <xTaskCreateStatic>
 800140c:	4603      	mov	r3, r0
 800140e:	60fb      	str	r3, [r7, #12]
 8001410:	e01c      	b.n	800144c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	685c      	ldr	r4, [r3, #4]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800141e:	b29e      	uxth	r6, r3
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001426:	4618      	mov	r0, r3
 8001428:	f7ff ffaa 	bl	8001380 <makeFreeRtosPriority>
 800142c:	4602      	mov	r2, r0
 800142e:	f107 030c 	add.w	r3, r7, #12
 8001432:	9301      	str	r3, [sp, #4]
 8001434:	9200      	str	r2, [sp, #0]
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	4632      	mov	r2, r6
 800143a:	4629      	mov	r1, r5
 800143c:	4620      	mov	r0, r4
 800143e:	f000 fd09 	bl	8001e54 <xTaskCreate>
 8001442:	4603      	mov	r3, r0
 8001444:	2b01      	cmp	r3, #1
 8001446:	d001      	beq.n	800144c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8001448:	2300      	movs	r3, #0
 800144a:	e000      	b.n	800144e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800144c:	68fb      	ldr	r3, [r7, #12]
}
 800144e:	4618      	mov	r0, r3
 8001450:	3714      	adds	r7, #20
 8001452:	46bd      	mov	sp, r7
 8001454:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001456 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001456:	b580      	push	{r7, lr}
 8001458:	b084      	sub	sp, #16
 800145a:	af00      	add	r7, sp, #0
 800145c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <osDelay+0x16>
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	e000      	b.n	800146e <osDelay+0x18>
 800146c:	2301      	movs	r3, #1
 800146e:	4618      	mov	r0, r3
 8001470:	f000 fe26 	bl	80020c0 <vTaskDelay>
  
  return osOK;
 8001474:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001476:	4618      	mov	r0, r3
 8001478:	3710      	adds	r7, #16
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}

0800147e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800147e:	b480      	push	{r7}
 8001480:	b083      	sub	sp, #12
 8001482:	af00      	add	r7, sp, #0
 8001484:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	f103 0208 	add.w	r2, r3, #8
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001496:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	f103 0208 	add.w	r2, r3, #8
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	f103 0208 	add.w	r2, r3, #8
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2200      	movs	r2, #0
 80014b0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80014b2:	bf00      	nop
 80014b4:	370c      	adds	r7, #12
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr

080014be <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80014be:	b480      	push	{r7}
 80014c0:	b083      	sub	sp, #12
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2200      	movs	r2, #0
 80014ca:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80014cc:	bf00      	nop
 80014ce:	370c      	adds	r7, #12
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr

080014d8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80014d8:	b480      	push	{r7}
 80014da:	b085      	sub	sp, #20
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
 80014e0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	68fa      	ldr	r2, [r7, #12]
 80014ec:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	689a      	ldr	r2, [r3, #8]
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	683a      	ldr	r2, [r7, #0]
 80014fc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	683a      	ldr	r2, [r7, #0]
 8001502:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	687a      	ldr	r2, [r7, #4]
 8001508:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	1c5a      	adds	r2, r3, #1
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	601a      	str	r2, [r3, #0]
}
 8001514:	bf00      	nop
 8001516:	3714      	adds	r7, #20
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr

08001520 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001520:	b480      	push	{r7}
 8001522:	b085      	sub	sp, #20
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001536:	d103      	bne.n	8001540 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	691b      	ldr	r3, [r3, #16]
 800153c:	60fb      	str	r3, [r7, #12]
 800153e:	e00c      	b.n	800155a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	3308      	adds	r3, #8
 8001544:	60fb      	str	r3, [r7, #12]
 8001546:	e002      	b.n	800154e <vListInsert+0x2e>
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	60fb      	str	r3, [r7, #12]
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	429a      	cmp	r2, r3
 8001558:	d9f6      	bls.n	8001548 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	685a      	ldr	r2, [r3, #4]
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	683a      	ldr	r2, [r7, #0]
 8001568:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	68fa      	ldr	r2, [r7, #12]
 800156e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	683a      	ldr	r2, [r7, #0]
 8001574:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	687a      	ldr	r2, [r7, #4]
 800157a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	1c5a      	adds	r2, r3, #1
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	601a      	str	r2, [r3, #0]
}
 8001586:	bf00      	nop
 8001588:	3714      	adds	r7, #20
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr

08001592 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001592:	b480      	push	{r7}
 8001594:	b085      	sub	sp, #20
 8001596:	af00      	add	r7, sp, #0
 8001598:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	691b      	ldr	r3, [r3, #16]
 800159e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	687a      	ldr	r2, [r7, #4]
 80015a6:	6892      	ldr	r2, [r2, #8]
 80015a8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	687a      	ldr	r2, [r7, #4]
 80015b0:	6852      	ldr	r2, [r2, #4]
 80015b2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	685a      	ldr	r2, [r3, #4]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	429a      	cmp	r2, r3
 80015bc:	d103      	bne.n	80015c6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	689a      	ldr	r2, [r3, #8]
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2200      	movs	r2, #0
 80015ca:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	1e5a      	subs	r2, r3, #1
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	681b      	ldr	r3, [r3, #0]
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3714      	adds	r7, #20
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
	...

080015e8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80015e8:	b480      	push	{r7}
 80015ea:	b085      	sub	sp, #20
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	60f8      	str	r0, [r7, #12]
 80015f0:	60b9      	str	r1, [r7, #8]
 80015f2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	3b04      	subs	r3, #4
 80015f8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001600:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	3b04      	subs	r3, #4
 8001606:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	f023 0201 	bic.w	r2, r3, #1
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	3b04      	subs	r3, #4
 8001616:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8001618:	4a0c      	ldr	r2, [pc, #48]	; (800164c <pxPortInitialiseStack+0x64>)
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	3b14      	subs	r3, #20
 8001622:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8001624:	687a      	ldr	r2, [r7, #4]
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	3b04      	subs	r3, #4
 800162e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	f06f 0202 	mvn.w	r2, #2
 8001636:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	3b20      	subs	r3, #32
 800163c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800163e:	68fb      	ldr	r3, [r7, #12]
}
 8001640:	4618      	mov	r0, r3
 8001642:	3714      	adds	r7, #20
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr
 800164c:	08001651 	.word	0x08001651

08001650 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001650:	b480      	push	{r7}
 8001652:	b085      	sub	sp, #20
 8001654:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8001656:	2300      	movs	r3, #0
 8001658:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800165a:	4b11      	ldr	r3, [pc, #68]	; (80016a0 <prvTaskExitError+0x50>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001662:	d009      	beq.n	8001678 <prvTaskExitError+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001668:	f383 8811 	msr	BASEPRI, r3
 800166c:	f3bf 8f6f 	isb	sy
 8001670:	f3bf 8f4f 	dsb	sy
 8001674:	60fb      	str	r3, [r7, #12]
 8001676:	e7fe      	b.n	8001676 <prvTaskExitError+0x26>
 8001678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800167c:	f383 8811 	msr	BASEPRI, r3
 8001680:	f3bf 8f6f 	isb	sy
 8001684:	f3bf 8f4f 	dsb	sy
 8001688:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800168a:	bf00      	nop
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d0fc      	beq.n	800168c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8001692:	bf00      	nop
 8001694:	3714      	adds	r7, #20
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	20000008 	.word	0x20000008
	...

080016b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80016b0:	4b07      	ldr	r3, [pc, #28]	; (80016d0 <pxCurrentTCBConst2>)
 80016b2:	6819      	ldr	r1, [r3, #0]
 80016b4:	6808      	ldr	r0, [r1, #0]
 80016b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80016ba:	f380 8809 	msr	PSP, r0
 80016be:	f3bf 8f6f 	isb	sy
 80016c2:	f04f 0000 	mov.w	r0, #0
 80016c6:	f380 8811 	msr	BASEPRI, r0
 80016ca:	4770      	bx	lr
 80016cc:	f3af 8000 	nop.w

080016d0 <pxCurrentTCBConst2>:
 80016d0:	20003c4c 	.word	0x20003c4c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80016d4:	bf00      	nop
 80016d6:	bf00      	nop

080016d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80016d8:	4808      	ldr	r0, [pc, #32]	; (80016fc <prvPortStartFirstTask+0x24>)
 80016da:	6800      	ldr	r0, [r0, #0]
 80016dc:	6800      	ldr	r0, [r0, #0]
 80016de:	f380 8808 	msr	MSP, r0
 80016e2:	f04f 0000 	mov.w	r0, #0
 80016e6:	f380 8814 	msr	CONTROL, r0
 80016ea:	b662      	cpsie	i
 80016ec:	b661      	cpsie	f
 80016ee:	f3bf 8f4f 	dsb	sy
 80016f2:	f3bf 8f6f 	isb	sy
 80016f6:	df00      	svc	0
 80016f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80016fa:	bf00      	nop
 80016fc:	e000ed08 	.word	0xe000ed08

08001700 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b086      	sub	sp, #24
 8001704:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8001706:	4b44      	ldr	r3, [pc, #272]	; (8001818 <xPortStartScheduler+0x118>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a44      	ldr	r2, [pc, #272]	; (800181c <xPortStartScheduler+0x11c>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d109      	bne.n	8001724 <xPortStartScheduler+0x24>
 8001710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001714:	f383 8811 	msr	BASEPRI, r3
 8001718:	f3bf 8f6f 	isb	sy
 800171c:	f3bf 8f4f 	dsb	sy
 8001720:	613b      	str	r3, [r7, #16]
 8001722:	e7fe      	b.n	8001722 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8001724:	4b3c      	ldr	r3, [pc, #240]	; (8001818 <xPortStartScheduler+0x118>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a3d      	ldr	r2, [pc, #244]	; (8001820 <xPortStartScheduler+0x120>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d109      	bne.n	8001742 <xPortStartScheduler+0x42>
 800172e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001732:	f383 8811 	msr	BASEPRI, r3
 8001736:	f3bf 8f6f 	isb	sy
 800173a:	f3bf 8f4f 	dsb	sy
 800173e:	60fb      	str	r3, [r7, #12]
 8001740:	e7fe      	b.n	8001740 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8001742:	4b38      	ldr	r3, [pc, #224]	; (8001824 <xPortStartScheduler+0x124>)
 8001744:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	b2db      	uxtb	r3, r3
 800174c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	22ff      	movs	r2, #255	; 0xff
 8001752:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	b2db      	uxtb	r3, r3
 800175a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800175c:	78fb      	ldrb	r3, [r7, #3]
 800175e:	b2db      	uxtb	r3, r3
 8001760:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001764:	b2da      	uxtb	r2, r3
 8001766:	4b30      	ldr	r3, [pc, #192]	; (8001828 <xPortStartScheduler+0x128>)
 8001768:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800176a:	4b30      	ldr	r3, [pc, #192]	; (800182c <xPortStartScheduler+0x12c>)
 800176c:	2207      	movs	r2, #7
 800176e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001770:	e009      	b.n	8001786 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8001772:	4b2e      	ldr	r3, [pc, #184]	; (800182c <xPortStartScheduler+0x12c>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	3b01      	subs	r3, #1
 8001778:	4a2c      	ldr	r2, [pc, #176]	; (800182c <xPortStartScheduler+0x12c>)
 800177a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800177c:	78fb      	ldrb	r3, [r7, #3]
 800177e:	b2db      	uxtb	r3, r3
 8001780:	005b      	lsls	r3, r3, #1
 8001782:	b2db      	uxtb	r3, r3
 8001784:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001786:	78fb      	ldrb	r3, [r7, #3]
 8001788:	b2db      	uxtb	r3, r3
 800178a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800178e:	2b80      	cmp	r3, #128	; 0x80
 8001790:	d0ef      	beq.n	8001772 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8001792:	4b26      	ldr	r3, [pc, #152]	; (800182c <xPortStartScheduler+0x12c>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f1c3 0307 	rsb	r3, r3, #7
 800179a:	2b04      	cmp	r3, #4
 800179c:	d009      	beq.n	80017b2 <xPortStartScheduler+0xb2>
 800179e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017a2:	f383 8811 	msr	BASEPRI, r3
 80017a6:	f3bf 8f6f 	isb	sy
 80017aa:	f3bf 8f4f 	dsb	sy
 80017ae:	60bb      	str	r3, [r7, #8]
 80017b0:	e7fe      	b.n	80017b0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80017b2:	4b1e      	ldr	r3, [pc, #120]	; (800182c <xPortStartScheduler+0x12c>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	021b      	lsls	r3, r3, #8
 80017b8:	4a1c      	ldr	r2, [pc, #112]	; (800182c <xPortStartScheduler+0x12c>)
 80017ba:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80017bc:	4b1b      	ldr	r3, [pc, #108]	; (800182c <xPortStartScheduler+0x12c>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80017c4:	4a19      	ldr	r2, [pc, #100]	; (800182c <xPortStartScheduler+0x12c>)
 80017c6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	b2da      	uxtb	r2, r3
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80017d0:	4a17      	ldr	r2, [pc, #92]	; (8001830 <xPortStartScheduler+0x130>)
 80017d2:	4b17      	ldr	r3, [pc, #92]	; (8001830 <xPortStartScheduler+0x130>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017da:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80017dc:	4a14      	ldr	r2, [pc, #80]	; (8001830 <xPortStartScheduler+0x130>)
 80017de:	4b14      	ldr	r3, [pc, #80]	; (8001830 <xPortStartScheduler+0x130>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80017e6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80017e8:	f000 f8d6 	bl	8001998 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80017ec:	4b11      	ldr	r3, [pc, #68]	; (8001834 <xPortStartScheduler+0x134>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80017f2:	f000 f8f5 	bl	80019e0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80017f6:	4a10      	ldr	r2, [pc, #64]	; (8001838 <xPortStartScheduler+0x138>)
 80017f8:	4b0f      	ldr	r3, [pc, #60]	; (8001838 <xPortStartScheduler+0x138>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8001800:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8001802:	f7ff ff69 	bl	80016d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8001806:	f000 fe4f 	bl	80024a8 <vTaskSwitchContext>
	prvTaskExitError();
 800180a:	f7ff ff21 	bl	8001650 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800180e:	2300      	movs	r3, #0
}
 8001810:	4618      	mov	r0, r3
 8001812:	3718      	adds	r7, #24
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	e000ed00 	.word	0xe000ed00
 800181c:	410fc271 	.word	0x410fc271
 8001820:	410fc270 	.word	0x410fc270
 8001824:	e000e400 	.word	0xe000e400
 8001828:	2000002c 	.word	0x2000002c
 800182c:	20000030 	.word	0x20000030
 8001830:	e000ed20 	.word	0xe000ed20
 8001834:	20000008 	.word	0x20000008
 8001838:	e000ef34 	.word	0xe000ef34

0800183c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001846:	f383 8811 	msr	BASEPRI, r3
 800184a:	f3bf 8f6f 	isb	sy
 800184e:	f3bf 8f4f 	dsb	sy
 8001852:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8001854:	4b0e      	ldr	r3, [pc, #56]	; (8001890 <vPortEnterCritical+0x54>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	3301      	adds	r3, #1
 800185a:	4a0d      	ldr	r2, [pc, #52]	; (8001890 <vPortEnterCritical+0x54>)
 800185c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800185e:	4b0c      	ldr	r3, [pc, #48]	; (8001890 <vPortEnterCritical+0x54>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	2b01      	cmp	r3, #1
 8001864:	d10e      	bne.n	8001884 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8001866:	4b0b      	ldr	r3, [pc, #44]	; (8001894 <vPortEnterCritical+0x58>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	b2db      	uxtb	r3, r3
 800186c:	2b00      	cmp	r3, #0
 800186e:	d009      	beq.n	8001884 <vPortEnterCritical+0x48>
 8001870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001874:	f383 8811 	msr	BASEPRI, r3
 8001878:	f3bf 8f6f 	isb	sy
 800187c:	f3bf 8f4f 	dsb	sy
 8001880:	603b      	str	r3, [r7, #0]
 8001882:	e7fe      	b.n	8001882 <vPortEnterCritical+0x46>
	}
}
 8001884:	bf00      	nop
 8001886:	370c      	adds	r7, #12
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr
 8001890:	20000008 	.word	0x20000008
 8001894:	e000ed04 	.word	0xe000ed04

08001898 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800189e:	4b11      	ldr	r3, [pc, #68]	; (80018e4 <vPortExitCritical+0x4c>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d109      	bne.n	80018ba <vPortExitCritical+0x22>
 80018a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018aa:	f383 8811 	msr	BASEPRI, r3
 80018ae:	f3bf 8f6f 	isb	sy
 80018b2:	f3bf 8f4f 	dsb	sy
 80018b6:	607b      	str	r3, [r7, #4]
 80018b8:	e7fe      	b.n	80018b8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80018ba:	4b0a      	ldr	r3, [pc, #40]	; (80018e4 <vPortExitCritical+0x4c>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	3b01      	subs	r3, #1
 80018c0:	4a08      	ldr	r2, [pc, #32]	; (80018e4 <vPortExitCritical+0x4c>)
 80018c2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80018c4:	4b07      	ldr	r3, [pc, #28]	; (80018e4 <vPortExitCritical+0x4c>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d104      	bne.n	80018d6 <vPortExitCritical+0x3e>
 80018cc:	2300      	movs	r3, #0
 80018ce:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80018d6:	bf00      	nop
 80018d8:	370c      	adds	r7, #12
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	20000008 	.word	0x20000008
	...

080018f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80018f0:	f3ef 8009 	mrs	r0, PSP
 80018f4:	f3bf 8f6f 	isb	sy
 80018f8:	4b15      	ldr	r3, [pc, #84]	; (8001950 <pxCurrentTCBConst>)
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	f01e 0f10 	tst.w	lr, #16
 8001900:	bf08      	it	eq
 8001902:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8001906:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800190a:	6010      	str	r0, [r2, #0]
 800190c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8001910:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001914:	f380 8811 	msr	BASEPRI, r0
 8001918:	f3bf 8f4f 	dsb	sy
 800191c:	f3bf 8f6f 	isb	sy
 8001920:	f000 fdc2 	bl	80024a8 <vTaskSwitchContext>
 8001924:	f04f 0000 	mov.w	r0, #0
 8001928:	f380 8811 	msr	BASEPRI, r0
 800192c:	bc09      	pop	{r0, r3}
 800192e:	6819      	ldr	r1, [r3, #0]
 8001930:	6808      	ldr	r0, [r1, #0]
 8001932:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001936:	f01e 0f10 	tst.w	lr, #16
 800193a:	bf08      	it	eq
 800193c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8001940:	f380 8809 	msr	PSP, r0
 8001944:	f3bf 8f6f 	isb	sy
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	f3af 8000 	nop.w

08001950 <pxCurrentTCBConst>:
 8001950:	20003c4c 	.word	0x20003c4c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8001954:	bf00      	nop
 8001956:	bf00      	nop

08001958 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
	__asm volatile
 800195e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001962:	f383 8811 	msr	BASEPRI, r3
 8001966:	f3bf 8f6f 	isb	sy
 800196a:	f3bf 8f4f 	dsb	sy
 800196e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8001970:	f000 fce2 	bl	8002338 <xTaskIncrementTick>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d003      	beq.n	8001982 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800197a:	4b06      	ldr	r3, [pc, #24]	; (8001994 <xPortSysTickHandler+0x3c>)
 800197c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001980:	601a      	str	r2, [r3, #0]
 8001982:	2300      	movs	r3, #0
 8001984:	603b      	str	r3, [r7, #0]
	__asm volatile
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800198c:	bf00      	nop
 800198e:	3708      	adds	r7, #8
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	e000ed04 	.word	0xe000ed04

08001998 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800199c:	4b0b      	ldr	r3, [pc, #44]	; (80019cc <vPortSetupTimerInterrupt+0x34>)
 800199e:	2200      	movs	r2, #0
 80019a0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80019a2:	4b0b      	ldr	r3, [pc, #44]	; (80019d0 <vPortSetupTimerInterrupt+0x38>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80019a8:	4a0a      	ldr	r2, [pc, #40]	; (80019d4 <vPortSetupTimerInterrupt+0x3c>)
 80019aa:	4b0b      	ldr	r3, [pc, #44]	; (80019d8 <vPortSetupTimerInterrupt+0x40>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	490b      	ldr	r1, [pc, #44]	; (80019dc <vPortSetupTimerInterrupt+0x44>)
 80019b0:	fba1 1303 	umull	r1, r3, r1, r3
 80019b4:	099b      	lsrs	r3, r3, #6
 80019b6:	3b01      	subs	r3, #1
 80019b8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80019ba:	4b04      	ldr	r3, [pc, #16]	; (80019cc <vPortSetupTimerInterrupt+0x34>)
 80019bc:	2207      	movs	r2, #7
 80019be:	601a      	str	r2, [r3, #0]
}
 80019c0:	bf00      	nop
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	e000e010 	.word	0xe000e010
 80019d0:	e000e018 	.word	0xe000e018
 80019d4:	e000e014 	.word	0xe000e014
 80019d8:	2000000c 	.word	0x2000000c
 80019dc:	10624dd3 	.word	0x10624dd3

080019e0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80019e0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80019f0 <vPortEnableVFP+0x10>
 80019e4:	6801      	ldr	r1, [r0, #0]
 80019e6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80019ea:	6001      	str	r1, [r0, #0]
 80019ec:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80019ee:	bf00      	nop
 80019f0:	e000ed88 	.word	0xe000ed88

080019f4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b08a      	sub	sp, #40	; 0x28
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80019fc:	2300      	movs	r3, #0
 80019fe:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8001a00:	f000 fbf0 	bl	80021e4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8001a04:	4b57      	ldr	r3, [pc, #348]	; (8001b64 <pvPortMalloc+0x170>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d101      	bne.n	8001a10 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8001a0c:	f000 f90c 	bl	8001c28 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001a10:	4b55      	ldr	r3, [pc, #340]	; (8001b68 <pvPortMalloc+0x174>)
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	4013      	ands	r3, r2
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	f040 808c 	bne.w	8001b36 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d01c      	beq.n	8001a5e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8001a24:	2208      	movs	r2, #8
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4413      	add	r3, r2
 8001a2a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	f003 0307 	and.w	r3, r3, #7
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d013      	beq.n	8001a5e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	f023 0307 	bic.w	r3, r3, #7
 8001a3c:	3308      	adds	r3, #8
 8001a3e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	f003 0307 	and.w	r3, r3, #7
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d009      	beq.n	8001a5e <pvPortMalloc+0x6a>
	__asm volatile
 8001a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a4e:	f383 8811 	msr	BASEPRI, r3
 8001a52:	f3bf 8f6f 	isb	sy
 8001a56:	f3bf 8f4f 	dsb	sy
 8001a5a:	617b      	str	r3, [r7, #20]
 8001a5c:	e7fe      	b.n	8001a5c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d068      	beq.n	8001b36 <pvPortMalloc+0x142>
 8001a64:	4b41      	ldr	r3, [pc, #260]	; (8001b6c <pvPortMalloc+0x178>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	687a      	ldr	r2, [r7, #4]
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	d863      	bhi.n	8001b36 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8001a6e:	4b40      	ldr	r3, [pc, #256]	; (8001b70 <pvPortMalloc+0x17c>)
 8001a70:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8001a72:	4b3f      	ldr	r3, [pc, #252]	; (8001b70 <pvPortMalloc+0x17c>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001a78:	e004      	b.n	8001a84 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8001a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8001a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a86:	685a      	ldr	r2, [r3, #4]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	d203      	bcs.n	8001a96 <pvPortMalloc+0xa2>
 8001a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d1f1      	bne.n	8001a7a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8001a96:	4b33      	ldr	r3, [pc, #204]	; (8001b64 <pvPortMalloc+0x170>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d04a      	beq.n	8001b36 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001aa0:	6a3b      	ldr	r3, [r7, #32]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	2208      	movs	r2, #8
 8001aa6:	4413      	add	r3, r2
 8001aa8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	6a3b      	ldr	r3, [r7, #32]
 8001ab0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab4:	685a      	ldr	r2, [r3, #4]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	1ad2      	subs	r2, r2, r3
 8001aba:	2308      	movs	r3, #8
 8001abc:	005b      	lsls	r3, r3, #1
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d91e      	bls.n	8001b00 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001ac2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	4413      	add	r3, r2
 8001ac8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001aca:	69bb      	ldr	r3, [r7, #24]
 8001acc:	f003 0307 	and.w	r3, r3, #7
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d009      	beq.n	8001ae8 <pvPortMalloc+0xf4>
 8001ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ad8:	f383 8811 	msr	BASEPRI, r3
 8001adc:	f3bf 8f6f 	isb	sy
 8001ae0:	f3bf 8f4f 	dsb	sy
 8001ae4:	613b      	str	r3, [r7, #16]
 8001ae6:	e7fe      	b.n	8001ae6 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aea:	685a      	ldr	r2, [r3, #4]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	1ad2      	subs	r2, r2, r3
 8001af0:	69bb      	ldr	r3, [r7, #24]
 8001af2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af6:	687a      	ldr	r2, [r7, #4]
 8001af8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001afa:	69b8      	ldr	r0, [r7, #24]
 8001afc:	f000 f8f6 	bl	8001cec <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001b00:	4b1a      	ldr	r3, [pc, #104]	; (8001b6c <pvPortMalloc+0x178>)
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	4a18      	ldr	r2, [pc, #96]	; (8001b6c <pvPortMalloc+0x178>)
 8001b0c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001b0e:	4b17      	ldr	r3, [pc, #92]	; (8001b6c <pvPortMalloc+0x178>)
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	4b18      	ldr	r3, [pc, #96]	; (8001b74 <pvPortMalloc+0x180>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	429a      	cmp	r2, r3
 8001b18:	d203      	bcs.n	8001b22 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001b1a:	4b14      	ldr	r3, [pc, #80]	; (8001b6c <pvPortMalloc+0x178>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a15      	ldr	r2, [pc, #84]	; (8001b74 <pvPortMalloc+0x180>)
 8001b20:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b24:	685a      	ldr	r2, [r3, #4]
 8001b26:	4b10      	ldr	r3, [pc, #64]	; (8001b68 <pvPortMalloc+0x174>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	431a      	orrs	r2, r3
 8001b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b32:	2200      	movs	r2, #0
 8001b34:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8001b36:	f000 fb63 	bl	8002200 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	f003 0307 	and.w	r3, r3, #7
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d009      	beq.n	8001b58 <pvPortMalloc+0x164>
 8001b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b48:	f383 8811 	msr	BASEPRI, r3
 8001b4c:	f3bf 8f6f 	isb	sy
 8001b50:	f3bf 8f4f 	dsb	sy
 8001b54:	60fb      	str	r3, [r7, #12]
 8001b56:	e7fe      	b.n	8001b56 <pvPortMalloc+0x162>
	return pvReturn;
 8001b58:	69fb      	ldr	r3, [r7, #28]
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3728      	adds	r7, #40	; 0x28
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	20003c3c 	.word	0x20003c3c
 8001b68:	20003c48 	.word	0x20003c48
 8001b6c:	20003c40 	.word	0x20003c40
 8001b70:	20003c34 	.word	0x20003c34
 8001b74:	20003c44 	.word	0x20003c44

08001b78 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b086      	sub	sp, #24
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d046      	beq.n	8001c18 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8001b8a:	2308      	movs	r3, #8
 8001b8c:	425b      	negs	r3, r3
 8001b8e:	697a      	ldr	r2, [r7, #20]
 8001b90:	4413      	add	r3, r2
 8001b92:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	685a      	ldr	r2, [r3, #4]
 8001b9c:	4b20      	ldr	r3, [pc, #128]	; (8001c20 <vPortFree+0xa8>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d109      	bne.n	8001bba <vPortFree+0x42>
 8001ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001baa:	f383 8811 	msr	BASEPRI, r3
 8001bae:	f3bf 8f6f 	isb	sy
 8001bb2:	f3bf 8f4f 	dsb	sy
 8001bb6:	60fb      	str	r3, [r7, #12]
 8001bb8:	e7fe      	b.n	8001bb8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d009      	beq.n	8001bd6 <vPortFree+0x5e>
 8001bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bc6:	f383 8811 	msr	BASEPRI, r3
 8001bca:	f3bf 8f6f 	isb	sy
 8001bce:	f3bf 8f4f 	dsb	sy
 8001bd2:	60bb      	str	r3, [r7, #8]
 8001bd4:	e7fe      	b.n	8001bd4 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	685a      	ldr	r2, [r3, #4]
 8001bda:	4b11      	ldr	r3, [pc, #68]	; (8001c20 <vPortFree+0xa8>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4013      	ands	r3, r2
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d019      	beq.n	8001c18 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d115      	bne.n	8001c18 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	685a      	ldr	r2, [r3, #4]
 8001bf0:	4b0b      	ldr	r3, [pc, #44]	; (8001c20 <vPortFree+0xa8>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	43db      	mvns	r3, r3
 8001bf6:	401a      	ands	r2, r3
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8001bfc:	f000 faf2 	bl	80021e4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	685a      	ldr	r2, [r3, #4]
 8001c04:	4b07      	ldr	r3, [pc, #28]	; (8001c24 <vPortFree+0xac>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4413      	add	r3, r2
 8001c0a:	4a06      	ldr	r2, [pc, #24]	; (8001c24 <vPortFree+0xac>)
 8001c0c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001c0e:	6938      	ldr	r0, [r7, #16]
 8001c10:	f000 f86c 	bl	8001cec <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8001c14:	f000 faf4 	bl	8002200 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8001c18:	bf00      	nop
 8001c1a:	3718      	adds	r7, #24
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	20003c48 	.word	0x20003c48
 8001c24:	20003c40 	.word	0x20003c40

08001c28 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b085      	sub	sp, #20
 8001c2c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001c2e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8001c32:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8001c34:	4b27      	ldr	r3, [pc, #156]	; (8001cd4 <prvHeapInit+0xac>)
 8001c36:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	f003 0307 	and.w	r3, r3, #7
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d00c      	beq.n	8001c5c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	3307      	adds	r3, #7
 8001c46:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	f023 0307 	bic.w	r3, r3, #7
 8001c4e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001c50:	68ba      	ldr	r2, [r7, #8]
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	4a1f      	ldr	r2, [pc, #124]	; (8001cd4 <prvHeapInit+0xac>)
 8001c58:	4413      	add	r3, r2
 8001c5a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001c60:	4a1d      	ldr	r2, [pc, #116]	; (8001cd8 <prvHeapInit+0xb0>)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8001c66:	4b1c      	ldr	r3, [pc, #112]	; (8001cd8 <prvHeapInit+0xb0>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001c6c:	687a      	ldr	r2, [r7, #4]
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	4413      	add	r3, r2
 8001c72:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8001c74:	2208      	movs	r2, #8
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	1a9b      	subs	r3, r3, r2
 8001c7a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	f023 0307 	bic.w	r3, r3, #7
 8001c82:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	4a15      	ldr	r2, [pc, #84]	; (8001cdc <prvHeapInit+0xb4>)
 8001c88:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8001c8a:	4b14      	ldr	r3, [pc, #80]	; (8001cdc <prvHeapInit+0xb4>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8001c92:	4b12      	ldr	r3, [pc, #72]	; (8001cdc <prvHeapInit+0xb4>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	2200      	movs	r2, #0
 8001c98:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	68fa      	ldr	r2, [r7, #12]
 8001ca2:	1ad2      	subs	r2, r2, r3
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001ca8:	4b0c      	ldr	r3, [pc, #48]	; (8001cdc <prvHeapInit+0xb4>)
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	4a0a      	ldr	r2, [pc, #40]	; (8001ce0 <prvHeapInit+0xb8>)
 8001cb6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	4a09      	ldr	r2, [pc, #36]	; (8001ce4 <prvHeapInit+0xbc>)
 8001cbe:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001cc0:	4b09      	ldr	r3, [pc, #36]	; (8001ce8 <prvHeapInit+0xc0>)
 8001cc2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001cc6:	601a      	str	r2, [r3, #0]
}
 8001cc8:	bf00      	nop
 8001cca:	3714      	adds	r7, #20
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr
 8001cd4:	20000034 	.word	0x20000034
 8001cd8:	20003c34 	.word	0x20003c34
 8001cdc:	20003c3c 	.word	0x20003c3c
 8001ce0:	20003c44 	.word	0x20003c44
 8001ce4:	20003c40 	.word	0x20003c40
 8001ce8:	20003c48 	.word	0x20003c48

08001cec <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001cec:	b480      	push	{r7}
 8001cee:	b085      	sub	sp, #20
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001cf4:	4b28      	ldr	r3, [pc, #160]	; (8001d98 <prvInsertBlockIntoFreeList+0xac>)
 8001cf6:	60fb      	str	r3, [r7, #12]
 8001cf8:	e002      	b.n	8001d00 <prvInsertBlockIntoFreeList+0x14>
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	60fb      	str	r3, [r7, #12]
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	429a      	cmp	r2, r3
 8001d08:	d3f7      	bcc.n	8001cfa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	68ba      	ldr	r2, [r7, #8]
 8001d14:	441a      	add	r2, r3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d108      	bne.n	8001d2e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	685a      	ldr	r2, [r3, #4]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	441a      	add	r2, r3
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	68ba      	ldr	r2, [r7, #8]
 8001d38:	441a      	add	r2, r3
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	d118      	bne.n	8001d74 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	4b15      	ldr	r3, [pc, #84]	; (8001d9c <prvInsertBlockIntoFreeList+0xb0>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	d00d      	beq.n	8001d6a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	685a      	ldr	r2, [r3, #4]
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	441a      	add	r2, r3
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	601a      	str	r2, [r3, #0]
 8001d68:	e008      	b.n	8001d7c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001d6a:	4b0c      	ldr	r3, [pc, #48]	; (8001d9c <prvInsertBlockIntoFreeList+0xb0>)
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	601a      	str	r2, [r3, #0]
 8001d72:	e003      	b.n	8001d7c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001d7c:	68fa      	ldr	r2, [r7, #12]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d002      	beq.n	8001d8a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	687a      	ldr	r2, [r7, #4]
 8001d88:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001d8a:	bf00      	nop
 8001d8c:	3714      	adds	r7, #20
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	20003c34 	.word	0x20003c34
 8001d9c:	20003c3c 	.word	0x20003c3c

08001da0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b08e      	sub	sp, #56	; 0x38
 8001da4:	af04      	add	r7, sp, #16
 8001da6:	60f8      	str	r0, [r7, #12]
 8001da8:	60b9      	str	r1, [r7, #8]
 8001daa:	607a      	str	r2, [r7, #4]
 8001dac:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8001dae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d109      	bne.n	8001dc8 <xTaskCreateStatic+0x28>
 8001db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001db8:	f383 8811 	msr	BASEPRI, r3
 8001dbc:	f3bf 8f6f 	isb	sy
 8001dc0:	f3bf 8f4f 	dsb	sy
 8001dc4:	623b      	str	r3, [r7, #32]
 8001dc6:	e7fe      	b.n	8001dc6 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8001dc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d109      	bne.n	8001de2 <xTaskCreateStatic+0x42>
 8001dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001dd2:	f383 8811 	msr	BASEPRI, r3
 8001dd6:	f3bf 8f6f 	isb	sy
 8001dda:	f3bf 8f4f 	dsb	sy
 8001dde:	61fb      	str	r3, [r7, #28]
 8001de0:	e7fe      	b.n	8001de0 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8001de2:	2354      	movs	r3, #84	; 0x54
 8001de4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	2b54      	cmp	r3, #84	; 0x54
 8001dea:	d009      	beq.n	8001e00 <xTaskCreateStatic+0x60>
 8001dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001df0:	f383 8811 	msr	BASEPRI, r3
 8001df4:	f3bf 8f6f 	isb	sy
 8001df8:	f3bf 8f4f 	dsb	sy
 8001dfc:	61bb      	str	r3, [r7, #24]
 8001dfe:	e7fe      	b.n	8001dfe <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8001e00:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8001e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d01e      	beq.n	8001e46 <xTaskCreateStatic+0xa6>
 8001e08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d01b      	beq.n	8001e46 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e10:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8001e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e14:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001e16:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8001e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1a:	2202      	movs	r2, #2
 8001e1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8001e20:	2300      	movs	r3, #0
 8001e22:	9303      	str	r3, [sp, #12]
 8001e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e26:	9302      	str	r3, [sp, #8]
 8001e28:	f107 0314 	add.w	r3, r7, #20
 8001e2c:	9301      	str	r3, [sp, #4]
 8001e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e30:	9300      	str	r3, [sp, #0]
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	687a      	ldr	r2, [r7, #4]
 8001e36:	68b9      	ldr	r1, [r7, #8]
 8001e38:	68f8      	ldr	r0, [r7, #12]
 8001e3a:	f000 f850 	bl	8001ede <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001e3e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001e40:	f000 f8d4 	bl	8001fec <prvAddNewTaskToReadyList>
 8001e44:	e001      	b.n	8001e4a <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8001e46:	2300      	movs	r3, #0
 8001e48:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8001e4a:	697b      	ldr	r3, [r7, #20]
	}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3728      	adds	r7, #40	; 0x28
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}

08001e54 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b08c      	sub	sp, #48	; 0x30
 8001e58:	af04      	add	r7, sp, #16
 8001e5a:	60f8      	str	r0, [r7, #12]
 8001e5c:	60b9      	str	r1, [r7, #8]
 8001e5e:	603b      	str	r3, [r7, #0]
 8001e60:	4613      	mov	r3, r2
 8001e62:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001e64:	88fb      	ldrh	r3, [r7, #6]
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7ff fdc3 	bl	80019f4 <pvPortMalloc>
 8001e6e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d00e      	beq.n	8001e94 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001e76:	2054      	movs	r0, #84	; 0x54
 8001e78:	f7ff fdbc 	bl	80019f4 <pvPortMalloc>
 8001e7c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d003      	beq.n	8001e8c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	697a      	ldr	r2, [r7, #20]
 8001e88:	631a      	str	r2, [r3, #48]	; 0x30
 8001e8a:	e005      	b.n	8001e98 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8001e8c:	6978      	ldr	r0, [r7, #20]
 8001e8e:	f7ff fe73 	bl	8001b78 <vPortFree>
 8001e92:	e001      	b.n	8001e98 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8001e94:	2300      	movs	r3, #0
 8001e96:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d017      	beq.n	8001ece <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001ea6:	88fa      	ldrh	r2, [r7, #6]
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	9303      	str	r3, [sp, #12]
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	9302      	str	r3, [sp, #8]
 8001eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eb2:	9301      	str	r3, [sp, #4]
 8001eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eb6:	9300      	str	r3, [sp, #0]
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	68b9      	ldr	r1, [r7, #8]
 8001ebc:	68f8      	ldr	r0, [r7, #12]
 8001ebe:	f000 f80e 	bl	8001ede <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001ec2:	69f8      	ldr	r0, [r7, #28]
 8001ec4:	f000 f892 	bl	8001fec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	61bb      	str	r3, [r7, #24]
 8001ecc:	e002      	b.n	8001ed4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001ece:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ed2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8001ed4:	69bb      	ldr	r3, [r7, #24]
	}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3720      	adds	r7, #32
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}

08001ede <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8001ede:	b580      	push	{r7, lr}
 8001ee0:	b088      	sub	sp, #32
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	60f8      	str	r0, [r7, #12]
 8001ee6:	60b9      	str	r1, [r7, #8]
 8001ee8:	607a      	str	r2, [r7, #4]
 8001eea:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001eee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001ef6:	3b01      	subs	r3, #1
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	4413      	add	r3, r2
 8001efc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001efe:	69bb      	ldr	r3, [r7, #24]
 8001f00:	f023 0307 	bic.w	r3, r3, #7
 8001f04:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001f06:	69bb      	ldr	r3, [r7, #24]
 8001f08:	f003 0307 	and.w	r3, r3, #7
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d009      	beq.n	8001f24 <prvInitialiseNewTask+0x46>
 8001f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f14:	f383 8811 	msr	BASEPRI, r3
 8001f18:	f3bf 8f6f 	isb	sy
 8001f1c:	f3bf 8f4f 	dsb	sy
 8001f20:	617b      	str	r3, [r7, #20]
 8001f22:	e7fe      	b.n	8001f22 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d01f      	beq.n	8001f6a <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	61fb      	str	r3, [r7, #28]
 8001f2e:	e012      	b.n	8001f56 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001f30:	68ba      	ldr	r2, [r7, #8]
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	4413      	add	r3, r2
 8001f36:	7819      	ldrb	r1, [r3, #0]
 8001f38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	4413      	add	r3, r2
 8001f3e:	3334      	adds	r3, #52	; 0x34
 8001f40:	460a      	mov	r2, r1
 8001f42:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8001f44:	68ba      	ldr	r2, [r7, #8]
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	4413      	add	r3, r2
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d006      	beq.n	8001f5e <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	3301      	adds	r3, #1
 8001f54:	61fb      	str	r3, [r7, #28]
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	2b0f      	cmp	r3, #15
 8001f5a:	d9e9      	bls.n	8001f30 <prvInitialiseNewTask+0x52>
 8001f5c:	e000      	b.n	8001f60 <prvInitialiseNewTask+0x82>
			{
				break;
 8001f5e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f62:	2200      	movs	r2, #0
 8001f64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001f68:	e003      	b.n	8001f72 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8001f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f74:	2b06      	cmp	r3, #6
 8001f76:	d901      	bls.n	8001f7c <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001f78:	2306      	movs	r3, #6
 8001f7a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8001f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f80:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8001f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f86:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8001f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f90:	3304      	adds	r3, #4
 8001f92:	4618      	mov	r0, r3
 8001f94:	f7ff fa93 	bl	80014be <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f9a:	3318      	adds	r3, #24
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f7ff fa8e 	bl	80014be <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fa4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001fa6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001faa:	f1c3 0207 	rsb	r2, r3, #7
 8001fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fb0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001fb6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8001fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fba:	2200      	movs	r2, #0
 8001fbc:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001fc6:	683a      	ldr	r2, [r7, #0]
 8001fc8:	68f9      	ldr	r1, [r7, #12]
 8001fca:	69b8      	ldr	r0, [r7, #24]
 8001fcc:	f7ff fb0c 	bl	80015e8 <pxPortInitialiseStack>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fd4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8001fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d002      	beq.n	8001fe2 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001fe0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001fe2:	bf00      	nop
 8001fe4:	3720      	adds	r7, #32
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
	...

08001fec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8001ff4:	f7ff fc22 	bl	800183c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8001ff8:	4b2a      	ldr	r3, [pc, #168]	; (80020a4 <prvAddNewTaskToReadyList+0xb8>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	3301      	adds	r3, #1
 8001ffe:	4a29      	ldr	r2, [pc, #164]	; (80020a4 <prvAddNewTaskToReadyList+0xb8>)
 8002000:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002002:	4b29      	ldr	r3, [pc, #164]	; (80020a8 <prvAddNewTaskToReadyList+0xbc>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d109      	bne.n	800201e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800200a:	4a27      	ldr	r2, [pc, #156]	; (80020a8 <prvAddNewTaskToReadyList+0xbc>)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002010:	4b24      	ldr	r3, [pc, #144]	; (80020a4 <prvAddNewTaskToReadyList+0xb8>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	2b01      	cmp	r3, #1
 8002016:	d110      	bne.n	800203a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002018:	f000 fab8 	bl	800258c <prvInitialiseTaskLists>
 800201c:	e00d      	b.n	800203a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800201e:	4b23      	ldr	r3, [pc, #140]	; (80020ac <prvAddNewTaskToReadyList+0xc0>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d109      	bne.n	800203a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002026:	4b20      	ldr	r3, [pc, #128]	; (80020a8 <prvAddNewTaskToReadyList+0xbc>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002030:	429a      	cmp	r2, r3
 8002032:	d802      	bhi.n	800203a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002034:	4a1c      	ldr	r2, [pc, #112]	; (80020a8 <prvAddNewTaskToReadyList+0xbc>)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800203a:	4b1d      	ldr	r3, [pc, #116]	; (80020b0 <prvAddNewTaskToReadyList+0xc4>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	3301      	adds	r3, #1
 8002040:	4a1b      	ldr	r2, [pc, #108]	; (80020b0 <prvAddNewTaskToReadyList+0xc4>)
 8002042:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002048:	2201      	movs	r2, #1
 800204a:	409a      	lsls	r2, r3
 800204c:	4b19      	ldr	r3, [pc, #100]	; (80020b4 <prvAddNewTaskToReadyList+0xc8>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4313      	orrs	r3, r2
 8002052:	4a18      	ldr	r2, [pc, #96]	; (80020b4 <prvAddNewTaskToReadyList+0xc8>)
 8002054:	6013      	str	r3, [r2, #0]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800205a:	4613      	mov	r3, r2
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	4413      	add	r3, r2
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	4a15      	ldr	r2, [pc, #84]	; (80020b8 <prvAddNewTaskToReadyList+0xcc>)
 8002064:	441a      	add	r2, r3
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	3304      	adds	r3, #4
 800206a:	4619      	mov	r1, r3
 800206c:	4610      	mov	r0, r2
 800206e:	f7ff fa33 	bl	80014d8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002072:	f7ff fc11 	bl	8001898 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002076:	4b0d      	ldr	r3, [pc, #52]	; (80020ac <prvAddNewTaskToReadyList+0xc0>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d00e      	beq.n	800209c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800207e:	4b0a      	ldr	r3, [pc, #40]	; (80020a8 <prvAddNewTaskToReadyList+0xbc>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002088:	429a      	cmp	r2, r3
 800208a:	d207      	bcs.n	800209c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800208c:	4b0b      	ldr	r3, [pc, #44]	; (80020bc <prvAddNewTaskToReadyList+0xd0>)
 800208e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002092:	601a      	str	r2, [r3, #0]
 8002094:	f3bf 8f4f 	dsb	sy
 8002098:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800209c:	bf00      	nop
 800209e:	3708      	adds	r7, #8
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	20003d4c 	.word	0x20003d4c
 80020a8:	20003c4c 	.word	0x20003c4c
 80020ac:	20003d58 	.word	0x20003d58
 80020b0:	20003d68 	.word	0x20003d68
 80020b4:	20003d54 	.word	0x20003d54
 80020b8:	20003c50 	.word	0x20003c50
 80020bc:	e000ed04 	.word	0xe000ed04

080020c0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80020c8:	2300      	movs	r3, #0
 80020ca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d016      	beq.n	8002100 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80020d2:	4b13      	ldr	r3, [pc, #76]	; (8002120 <vTaskDelay+0x60>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d009      	beq.n	80020ee <vTaskDelay+0x2e>
 80020da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020de:	f383 8811 	msr	BASEPRI, r3
 80020e2:	f3bf 8f6f 	isb	sy
 80020e6:	f3bf 8f4f 	dsb	sy
 80020ea:	60bb      	str	r3, [r7, #8]
 80020ec:	e7fe      	b.n	80020ec <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80020ee:	f000 f879 	bl	80021e4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80020f2:	2100      	movs	r1, #0
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	f000 fb21 	bl	800273c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80020fa:	f000 f881 	bl	8002200 <xTaskResumeAll>
 80020fe:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d107      	bne.n	8002116 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8002106:	4b07      	ldr	r3, [pc, #28]	; (8002124 <vTaskDelay+0x64>)
 8002108:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800210c:	601a      	str	r2, [r3, #0]
 800210e:	f3bf 8f4f 	dsb	sy
 8002112:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002116:	bf00      	nop
 8002118:	3710      	adds	r7, #16
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	20003d74 	.word	0x20003d74
 8002124:	e000ed04 	.word	0xe000ed04

08002128 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b08a      	sub	sp, #40	; 0x28
 800212c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800212e:	2300      	movs	r3, #0
 8002130:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002132:	2300      	movs	r3, #0
 8002134:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002136:	463a      	mov	r2, r7
 8002138:	1d39      	adds	r1, r7, #4
 800213a:	f107 0308 	add.w	r3, r7, #8
 800213e:	4618      	mov	r0, r3
 8002140:	f000 fb62 	bl	8002808 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002144:	6839      	ldr	r1, [r7, #0]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	68ba      	ldr	r2, [r7, #8]
 800214a:	9202      	str	r2, [sp, #8]
 800214c:	9301      	str	r3, [sp, #4]
 800214e:	2300      	movs	r3, #0
 8002150:	9300      	str	r3, [sp, #0]
 8002152:	2300      	movs	r3, #0
 8002154:	460a      	mov	r2, r1
 8002156:	491d      	ldr	r1, [pc, #116]	; (80021cc <vTaskStartScheduler+0xa4>)
 8002158:	481d      	ldr	r0, [pc, #116]	; (80021d0 <vTaskStartScheduler+0xa8>)
 800215a:	f7ff fe21 	bl	8001da0 <xTaskCreateStatic>
 800215e:	4602      	mov	r2, r0
 8002160:	4b1c      	ldr	r3, [pc, #112]	; (80021d4 <vTaskStartScheduler+0xac>)
 8002162:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002164:	4b1b      	ldr	r3, [pc, #108]	; (80021d4 <vTaskStartScheduler+0xac>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d002      	beq.n	8002172 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800216c:	2301      	movs	r3, #1
 800216e:	617b      	str	r3, [r7, #20]
 8002170:	e001      	b.n	8002176 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002172:	2300      	movs	r3, #0
 8002174:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	2b01      	cmp	r3, #1
 800217a:	d115      	bne.n	80021a8 <vTaskStartScheduler+0x80>
 800217c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002180:	f383 8811 	msr	BASEPRI, r3
 8002184:	f3bf 8f6f 	isb	sy
 8002188:	f3bf 8f4f 	dsb	sy
 800218c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800218e:	4b12      	ldr	r3, [pc, #72]	; (80021d8 <vTaskStartScheduler+0xb0>)
 8002190:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002194:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002196:	4b11      	ldr	r3, [pc, #68]	; (80021dc <vTaskStartScheduler+0xb4>)
 8002198:	2201      	movs	r2, #1
 800219a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800219c:	4b10      	ldr	r3, [pc, #64]	; (80021e0 <vTaskStartScheduler+0xb8>)
 800219e:	2200      	movs	r2, #0
 80021a0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80021a2:	f7ff faad 	bl	8001700 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80021a6:	e00d      	b.n	80021c4 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80021ae:	d109      	bne.n	80021c4 <vTaskStartScheduler+0x9c>
 80021b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021b4:	f383 8811 	msr	BASEPRI, r3
 80021b8:	f3bf 8f6f 	isb	sy
 80021bc:	f3bf 8f4f 	dsb	sy
 80021c0:	60fb      	str	r3, [r7, #12]
 80021c2:	e7fe      	b.n	80021c2 <vTaskStartScheduler+0x9a>
}
 80021c4:	bf00      	nop
 80021c6:	3718      	adds	r7, #24
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	08002c10 	.word	0x08002c10
 80021d0:	0800255d 	.word	0x0800255d
 80021d4:	20003d70 	.word	0x20003d70
 80021d8:	20003d6c 	.word	0x20003d6c
 80021dc:	20003d58 	.word	0x20003d58
 80021e0:	20003d50 	.word	0x20003d50

080021e4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80021e8:	4b04      	ldr	r3, [pc, #16]	; (80021fc <vTaskSuspendAll+0x18>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	3301      	adds	r3, #1
 80021ee:	4a03      	ldr	r2, [pc, #12]	; (80021fc <vTaskSuspendAll+0x18>)
 80021f0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80021f2:	bf00      	nop
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr
 80021fc:	20003d74 	.word	0x20003d74

08002200 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b084      	sub	sp, #16
 8002204:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002206:	2300      	movs	r3, #0
 8002208:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800220a:	2300      	movs	r3, #0
 800220c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800220e:	4b41      	ldr	r3, [pc, #260]	; (8002314 <xTaskResumeAll+0x114>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d109      	bne.n	800222a <xTaskResumeAll+0x2a>
 8002216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800221a:	f383 8811 	msr	BASEPRI, r3
 800221e:	f3bf 8f6f 	isb	sy
 8002222:	f3bf 8f4f 	dsb	sy
 8002226:	603b      	str	r3, [r7, #0]
 8002228:	e7fe      	b.n	8002228 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800222a:	f7ff fb07 	bl	800183c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800222e:	4b39      	ldr	r3, [pc, #228]	; (8002314 <xTaskResumeAll+0x114>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	3b01      	subs	r3, #1
 8002234:	4a37      	ldr	r2, [pc, #220]	; (8002314 <xTaskResumeAll+0x114>)
 8002236:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002238:	4b36      	ldr	r3, [pc, #216]	; (8002314 <xTaskResumeAll+0x114>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d161      	bne.n	8002304 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002240:	4b35      	ldr	r3, [pc, #212]	; (8002318 <xTaskResumeAll+0x118>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d05d      	beq.n	8002304 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002248:	e02e      	b.n	80022a8 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800224a:	4b34      	ldr	r3, [pc, #208]	; (800231c <xTaskResumeAll+0x11c>)
 800224c:	68db      	ldr	r3, [r3, #12]
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	3318      	adds	r3, #24
 8002256:	4618      	mov	r0, r3
 8002258:	f7ff f99b 	bl	8001592 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	3304      	adds	r3, #4
 8002260:	4618      	mov	r0, r3
 8002262:	f7ff f996 	bl	8001592 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800226a:	2201      	movs	r2, #1
 800226c:	409a      	lsls	r2, r3
 800226e:	4b2c      	ldr	r3, [pc, #176]	; (8002320 <xTaskResumeAll+0x120>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4313      	orrs	r3, r2
 8002274:	4a2a      	ldr	r2, [pc, #168]	; (8002320 <xTaskResumeAll+0x120>)
 8002276:	6013      	str	r3, [r2, #0]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800227c:	4613      	mov	r3, r2
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	4413      	add	r3, r2
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	4a27      	ldr	r2, [pc, #156]	; (8002324 <xTaskResumeAll+0x124>)
 8002286:	441a      	add	r2, r3
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	3304      	adds	r3, #4
 800228c:	4619      	mov	r1, r3
 800228e:	4610      	mov	r0, r2
 8002290:	f7ff f922 	bl	80014d8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002298:	4b23      	ldr	r3, [pc, #140]	; (8002328 <xTaskResumeAll+0x128>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800229e:	429a      	cmp	r2, r3
 80022a0:	d302      	bcc.n	80022a8 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80022a2:	4b22      	ldr	r3, [pc, #136]	; (800232c <xTaskResumeAll+0x12c>)
 80022a4:	2201      	movs	r2, #1
 80022a6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80022a8:	4b1c      	ldr	r3, [pc, #112]	; (800231c <xTaskResumeAll+0x11c>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d1cc      	bne.n	800224a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d001      	beq.n	80022ba <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80022b6:	f000 fa03 	bl	80026c0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80022ba:	4b1d      	ldr	r3, [pc, #116]	; (8002330 <xTaskResumeAll+0x130>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d010      	beq.n	80022e8 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80022c6:	f000 f837 	bl	8002338 <xTaskIncrementTick>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d002      	beq.n	80022d6 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80022d0:	4b16      	ldr	r3, [pc, #88]	; (800232c <xTaskResumeAll+0x12c>)
 80022d2:	2201      	movs	r2, #1
 80022d4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	3b01      	subs	r3, #1
 80022da:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d1f1      	bne.n	80022c6 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 80022e2:	4b13      	ldr	r3, [pc, #76]	; (8002330 <xTaskResumeAll+0x130>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80022e8:	4b10      	ldr	r3, [pc, #64]	; (800232c <xTaskResumeAll+0x12c>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d009      	beq.n	8002304 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80022f0:	2301      	movs	r3, #1
 80022f2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80022f4:	4b0f      	ldr	r3, [pc, #60]	; (8002334 <xTaskResumeAll+0x134>)
 80022f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022fa:	601a      	str	r2, [r3, #0]
 80022fc:	f3bf 8f4f 	dsb	sy
 8002300:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002304:	f7ff fac8 	bl	8001898 <vPortExitCritical>

	return xAlreadyYielded;
 8002308:	68bb      	ldr	r3, [r7, #8]
}
 800230a:	4618      	mov	r0, r3
 800230c:	3710      	adds	r7, #16
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	20003d74 	.word	0x20003d74
 8002318:	20003d4c 	.word	0x20003d4c
 800231c:	20003d0c 	.word	0x20003d0c
 8002320:	20003d54 	.word	0x20003d54
 8002324:	20003c50 	.word	0x20003c50
 8002328:	20003c4c 	.word	0x20003c4c
 800232c:	20003d60 	.word	0x20003d60
 8002330:	20003d5c 	.word	0x20003d5c
 8002334:	e000ed04 	.word	0xe000ed04

08002338 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b086      	sub	sp, #24
 800233c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800233e:	2300      	movs	r3, #0
 8002340:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002342:	4b4e      	ldr	r3, [pc, #312]	; (800247c <xTaskIncrementTick+0x144>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	2b00      	cmp	r3, #0
 8002348:	f040 8087 	bne.w	800245a <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800234c:	4b4c      	ldr	r3, [pc, #304]	; (8002480 <xTaskIncrementTick+0x148>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	3301      	adds	r3, #1
 8002352:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002354:	4a4a      	ldr	r2, [pc, #296]	; (8002480 <xTaskIncrementTick+0x148>)
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d11f      	bne.n	80023a0 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8002360:	4b48      	ldr	r3, [pc, #288]	; (8002484 <xTaskIncrementTick+0x14c>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d009      	beq.n	800237e <xTaskIncrementTick+0x46>
 800236a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800236e:	f383 8811 	msr	BASEPRI, r3
 8002372:	f3bf 8f6f 	isb	sy
 8002376:	f3bf 8f4f 	dsb	sy
 800237a:	603b      	str	r3, [r7, #0]
 800237c:	e7fe      	b.n	800237c <xTaskIncrementTick+0x44>
 800237e:	4b41      	ldr	r3, [pc, #260]	; (8002484 <xTaskIncrementTick+0x14c>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	60fb      	str	r3, [r7, #12]
 8002384:	4b40      	ldr	r3, [pc, #256]	; (8002488 <xTaskIncrementTick+0x150>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a3e      	ldr	r2, [pc, #248]	; (8002484 <xTaskIncrementTick+0x14c>)
 800238a:	6013      	str	r3, [r2, #0]
 800238c:	4a3e      	ldr	r2, [pc, #248]	; (8002488 <xTaskIncrementTick+0x150>)
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	6013      	str	r3, [r2, #0]
 8002392:	4b3e      	ldr	r3, [pc, #248]	; (800248c <xTaskIncrementTick+0x154>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	3301      	adds	r3, #1
 8002398:	4a3c      	ldr	r2, [pc, #240]	; (800248c <xTaskIncrementTick+0x154>)
 800239a:	6013      	str	r3, [r2, #0]
 800239c:	f000 f990 	bl	80026c0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80023a0:	4b3b      	ldr	r3, [pc, #236]	; (8002490 <xTaskIncrementTick+0x158>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	693a      	ldr	r2, [r7, #16]
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d348      	bcc.n	800243c <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80023aa:	4b36      	ldr	r3, [pc, #216]	; (8002484 <xTaskIncrementTick+0x14c>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d104      	bne.n	80023be <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80023b4:	4b36      	ldr	r3, [pc, #216]	; (8002490 <xTaskIncrementTick+0x158>)
 80023b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80023ba:	601a      	str	r2, [r3, #0]
					break;
 80023bc:	e03e      	b.n	800243c <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80023be:	4b31      	ldr	r3, [pc, #196]	; (8002484 <xTaskIncrementTick+0x14c>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80023ce:	693a      	ldr	r2, [r7, #16]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d203      	bcs.n	80023de <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80023d6:	4a2e      	ldr	r2, [pc, #184]	; (8002490 <xTaskIncrementTick+0x158>)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80023dc:	e02e      	b.n	800243c <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	3304      	adds	r3, #4
 80023e2:	4618      	mov	r0, r3
 80023e4:	f7ff f8d5 	bl	8001592 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d004      	beq.n	80023fa <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	3318      	adds	r3, #24
 80023f4:	4618      	mov	r0, r3
 80023f6:	f7ff f8cc 	bl	8001592 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023fe:	2201      	movs	r2, #1
 8002400:	409a      	lsls	r2, r3
 8002402:	4b24      	ldr	r3, [pc, #144]	; (8002494 <xTaskIncrementTick+0x15c>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4313      	orrs	r3, r2
 8002408:	4a22      	ldr	r2, [pc, #136]	; (8002494 <xTaskIncrementTick+0x15c>)
 800240a:	6013      	str	r3, [r2, #0]
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002410:	4613      	mov	r3, r2
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	4413      	add	r3, r2
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	4a1f      	ldr	r2, [pc, #124]	; (8002498 <xTaskIncrementTick+0x160>)
 800241a:	441a      	add	r2, r3
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	3304      	adds	r3, #4
 8002420:	4619      	mov	r1, r3
 8002422:	4610      	mov	r0, r2
 8002424:	f7ff f858 	bl	80014d8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800242c:	4b1b      	ldr	r3, [pc, #108]	; (800249c <xTaskIncrementTick+0x164>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002432:	429a      	cmp	r2, r3
 8002434:	d3b9      	bcc.n	80023aa <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8002436:	2301      	movs	r3, #1
 8002438:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800243a:	e7b6      	b.n	80023aa <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800243c:	4b17      	ldr	r3, [pc, #92]	; (800249c <xTaskIncrementTick+0x164>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002442:	4915      	ldr	r1, [pc, #84]	; (8002498 <xTaskIncrementTick+0x160>)
 8002444:	4613      	mov	r3, r2
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	4413      	add	r3, r2
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	440b      	add	r3, r1
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	2b01      	cmp	r3, #1
 8002452:	d907      	bls.n	8002464 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8002454:	2301      	movs	r3, #1
 8002456:	617b      	str	r3, [r7, #20]
 8002458:	e004      	b.n	8002464 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800245a:	4b11      	ldr	r3, [pc, #68]	; (80024a0 <xTaskIncrementTick+0x168>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	3301      	adds	r3, #1
 8002460:	4a0f      	ldr	r2, [pc, #60]	; (80024a0 <xTaskIncrementTick+0x168>)
 8002462:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002464:	4b0f      	ldr	r3, [pc, #60]	; (80024a4 <xTaskIncrementTick+0x16c>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d001      	beq.n	8002470 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 800246c:	2301      	movs	r3, #1
 800246e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8002470:	697b      	ldr	r3, [r7, #20]
}
 8002472:	4618      	mov	r0, r3
 8002474:	3718      	adds	r7, #24
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	20003d74 	.word	0x20003d74
 8002480:	20003d50 	.word	0x20003d50
 8002484:	20003d04 	.word	0x20003d04
 8002488:	20003d08 	.word	0x20003d08
 800248c:	20003d64 	.word	0x20003d64
 8002490:	20003d6c 	.word	0x20003d6c
 8002494:	20003d54 	.word	0x20003d54
 8002498:	20003c50 	.word	0x20003c50
 800249c:	20003c4c 	.word	0x20003c4c
 80024a0:	20003d5c 	.word	0x20003d5c
 80024a4:	20003d60 	.word	0x20003d60

080024a8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80024a8:	b480      	push	{r7}
 80024aa:	b087      	sub	sp, #28
 80024ac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80024ae:	4b26      	ldr	r3, [pc, #152]	; (8002548 <vTaskSwitchContext+0xa0>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d003      	beq.n	80024be <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80024b6:	4b25      	ldr	r3, [pc, #148]	; (800254c <vTaskSwitchContext+0xa4>)
 80024b8:	2201      	movs	r2, #1
 80024ba:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80024bc:	e03e      	b.n	800253c <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 80024be:	4b23      	ldr	r3, [pc, #140]	; (800254c <vTaskSwitchContext+0xa4>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80024c4:	4b22      	ldr	r3, [pc, #136]	; (8002550 <vTaskSwitchContext+0xa8>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	fab3 f383 	clz	r3, r3
 80024d0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80024d2:	7afb      	ldrb	r3, [r7, #11]
 80024d4:	f1c3 031f 	rsb	r3, r3, #31
 80024d8:	617b      	str	r3, [r7, #20]
 80024da:	491e      	ldr	r1, [pc, #120]	; (8002554 <vTaskSwitchContext+0xac>)
 80024dc:	697a      	ldr	r2, [r7, #20]
 80024de:	4613      	mov	r3, r2
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	4413      	add	r3, r2
 80024e4:	009b      	lsls	r3, r3, #2
 80024e6:	440b      	add	r3, r1
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d109      	bne.n	8002502 <vTaskSwitchContext+0x5a>
	__asm volatile
 80024ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024f2:	f383 8811 	msr	BASEPRI, r3
 80024f6:	f3bf 8f6f 	isb	sy
 80024fa:	f3bf 8f4f 	dsb	sy
 80024fe:	607b      	str	r3, [r7, #4]
 8002500:	e7fe      	b.n	8002500 <vTaskSwitchContext+0x58>
 8002502:	697a      	ldr	r2, [r7, #20]
 8002504:	4613      	mov	r3, r2
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	4413      	add	r3, r2
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	4a11      	ldr	r2, [pc, #68]	; (8002554 <vTaskSwitchContext+0xac>)
 800250e:	4413      	add	r3, r2
 8002510:	613b      	str	r3, [r7, #16]
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	685a      	ldr	r2, [r3, #4]
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	605a      	str	r2, [r3, #4]
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	685a      	ldr	r2, [r3, #4]
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	3308      	adds	r3, #8
 8002524:	429a      	cmp	r2, r3
 8002526:	d104      	bne.n	8002532 <vTaskSwitchContext+0x8a>
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	685a      	ldr	r2, [r3, #4]
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	605a      	str	r2, [r3, #4]
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	4a07      	ldr	r2, [pc, #28]	; (8002558 <vTaskSwitchContext+0xb0>)
 800253a:	6013      	str	r3, [r2, #0]
}
 800253c:	bf00      	nop
 800253e:	371c      	adds	r7, #28
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr
 8002548:	20003d74 	.word	0x20003d74
 800254c:	20003d60 	.word	0x20003d60
 8002550:	20003d54 	.word	0x20003d54
 8002554:	20003c50 	.word	0x20003c50
 8002558:	20003c4c 	.word	0x20003c4c

0800255c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002564:	f000 f852 	bl	800260c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002568:	4b06      	ldr	r3, [pc, #24]	; (8002584 <prvIdleTask+0x28>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	2b01      	cmp	r3, #1
 800256e:	d9f9      	bls.n	8002564 <prvIdleTask+0x8>
			{
				taskYIELD();
 8002570:	4b05      	ldr	r3, [pc, #20]	; (8002588 <prvIdleTask+0x2c>)
 8002572:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002576:	601a      	str	r2, [r3, #0]
 8002578:	f3bf 8f4f 	dsb	sy
 800257c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002580:	e7f0      	b.n	8002564 <prvIdleTask+0x8>
 8002582:	bf00      	nop
 8002584:	20003c50 	.word	0x20003c50
 8002588:	e000ed04 	.word	0xe000ed04

0800258c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b082      	sub	sp, #8
 8002590:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002592:	2300      	movs	r3, #0
 8002594:	607b      	str	r3, [r7, #4]
 8002596:	e00c      	b.n	80025b2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002598:	687a      	ldr	r2, [r7, #4]
 800259a:	4613      	mov	r3, r2
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	4413      	add	r3, r2
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	4a12      	ldr	r2, [pc, #72]	; (80025ec <prvInitialiseTaskLists+0x60>)
 80025a4:	4413      	add	r3, r2
 80025a6:	4618      	mov	r0, r3
 80025a8:	f7fe ff69 	bl	800147e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	3301      	adds	r3, #1
 80025b0:	607b      	str	r3, [r7, #4]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2b06      	cmp	r3, #6
 80025b6:	d9ef      	bls.n	8002598 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80025b8:	480d      	ldr	r0, [pc, #52]	; (80025f0 <prvInitialiseTaskLists+0x64>)
 80025ba:	f7fe ff60 	bl	800147e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80025be:	480d      	ldr	r0, [pc, #52]	; (80025f4 <prvInitialiseTaskLists+0x68>)
 80025c0:	f7fe ff5d 	bl	800147e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80025c4:	480c      	ldr	r0, [pc, #48]	; (80025f8 <prvInitialiseTaskLists+0x6c>)
 80025c6:	f7fe ff5a 	bl	800147e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80025ca:	480c      	ldr	r0, [pc, #48]	; (80025fc <prvInitialiseTaskLists+0x70>)
 80025cc:	f7fe ff57 	bl	800147e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80025d0:	480b      	ldr	r0, [pc, #44]	; (8002600 <prvInitialiseTaskLists+0x74>)
 80025d2:	f7fe ff54 	bl	800147e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80025d6:	4b0b      	ldr	r3, [pc, #44]	; (8002604 <prvInitialiseTaskLists+0x78>)
 80025d8:	4a05      	ldr	r2, [pc, #20]	; (80025f0 <prvInitialiseTaskLists+0x64>)
 80025da:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80025dc:	4b0a      	ldr	r3, [pc, #40]	; (8002608 <prvInitialiseTaskLists+0x7c>)
 80025de:	4a05      	ldr	r2, [pc, #20]	; (80025f4 <prvInitialiseTaskLists+0x68>)
 80025e0:	601a      	str	r2, [r3, #0]
}
 80025e2:	bf00      	nop
 80025e4:	3708      	adds	r7, #8
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	20003c50 	.word	0x20003c50
 80025f0:	20003cdc 	.word	0x20003cdc
 80025f4:	20003cf0 	.word	0x20003cf0
 80025f8:	20003d0c 	.word	0x20003d0c
 80025fc:	20003d20 	.word	0x20003d20
 8002600:	20003d38 	.word	0x20003d38
 8002604:	20003d04 	.word	0x20003d04
 8002608:	20003d08 	.word	0x20003d08

0800260c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b082      	sub	sp, #8
 8002610:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002612:	e019      	b.n	8002648 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002614:	f7ff f912 	bl	800183c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002618:	4b0f      	ldr	r3, [pc, #60]	; (8002658 <prvCheckTasksWaitingTermination+0x4c>)
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	3304      	adds	r3, #4
 8002624:	4618      	mov	r0, r3
 8002626:	f7fe ffb4 	bl	8001592 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800262a:	4b0c      	ldr	r3, [pc, #48]	; (800265c <prvCheckTasksWaitingTermination+0x50>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	3b01      	subs	r3, #1
 8002630:	4a0a      	ldr	r2, [pc, #40]	; (800265c <prvCheckTasksWaitingTermination+0x50>)
 8002632:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002634:	4b0a      	ldr	r3, [pc, #40]	; (8002660 <prvCheckTasksWaitingTermination+0x54>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	3b01      	subs	r3, #1
 800263a:	4a09      	ldr	r2, [pc, #36]	; (8002660 <prvCheckTasksWaitingTermination+0x54>)
 800263c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800263e:	f7ff f92b 	bl	8001898 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f000 f80e 	bl	8002664 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002648:	4b05      	ldr	r3, [pc, #20]	; (8002660 <prvCheckTasksWaitingTermination+0x54>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d1e1      	bne.n	8002614 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002650:	bf00      	nop
 8002652:	3708      	adds	r7, #8
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}
 8002658:	20003d20 	.word	0x20003d20
 800265c:	20003d4c 	.word	0x20003d4c
 8002660:	20003d34 	.word	0x20003d34

08002664 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002664:	b580      	push	{r7, lr}
 8002666:	b084      	sub	sp, #16
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002672:	2b00      	cmp	r3, #0
 8002674:	d108      	bne.n	8002688 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267a:	4618      	mov	r0, r3
 800267c:	f7ff fa7c 	bl	8001b78 <vPortFree>
				vPortFree( pxTCB );
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f7ff fa79 	bl	8001b78 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002686:	e017      	b.n	80026b8 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800268e:	2b01      	cmp	r3, #1
 8002690:	d103      	bne.n	800269a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f7ff fa70 	bl	8001b78 <vPortFree>
	}
 8002698:	e00e      	b.n	80026b8 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80026a0:	2b02      	cmp	r3, #2
 80026a2:	d009      	beq.n	80026b8 <prvDeleteTCB+0x54>
 80026a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026a8:	f383 8811 	msr	BASEPRI, r3
 80026ac:	f3bf 8f6f 	isb	sy
 80026b0:	f3bf 8f4f 	dsb	sy
 80026b4:	60fb      	str	r3, [r7, #12]
 80026b6:	e7fe      	b.n	80026b6 <prvDeleteTCB+0x52>
	}
 80026b8:	bf00      	nop
 80026ba:	3710      	adds	r7, #16
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}

080026c0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80026c6:	4b0c      	ldr	r3, [pc, #48]	; (80026f8 <prvResetNextTaskUnblockTime+0x38>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d104      	bne.n	80026da <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80026d0:	4b0a      	ldr	r3, [pc, #40]	; (80026fc <prvResetNextTaskUnblockTime+0x3c>)
 80026d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80026d6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80026d8:	e008      	b.n	80026ec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80026da:	4b07      	ldr	r3, [pc, #28]	; (80026f8 <prvResetNextTaskUnblockTime+0x38>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	68db      	ldr	r3, [r3, #12]
 80026e2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	4a04      	ldr	r2, [pc, #16]	; (80026fc <prvResetNextTaskUnblockTime+0x3c>)
 80026ea:	6013      	str	r3, [r2, #0]
}
 80026ec:	bf00      	nop
 80026ee:	370c      	adds	r7, #12
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr
 80026f8:	20003d04 	.word	0x20003d04
 80026fc:	20003d6c 	.word	0x20003d6c

08002700 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8002706:	4b0b      	ldr	r3, [pc, #44]	; (8002734 <xTaskGetSchedulerState+0x34>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d102      	bne.n	8002714 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800270e:	2301      	movs	r3, #1
 8002710:	607b      	str	r3, [r7, #4]
 8002712:	e008      	b.n	8002726 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002714:	4b08      	ldr	r3, [pc, #32]	; (8002738 <xTaskGetSchedulerState+0x38>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d102      	bne.n	8002722 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800271c:	2302      	movs	r3, #2
 800271e:	607b      	str	r3, [r7, #4]
 8002720:	e001      	b.n	8002726 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8002722:	2300      	movs	r3, #0
 8002724:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8002726:	687b      	ldr	r3, [r7, #4]
	}
 8002728:	4618      	mov	r0, r3
 800272a:	370c      	adds	r7, #12
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr
 8002734:	20003d58 	.word	0x20003d58
 8002738:	20003d74 	.word	0x20003d74

0800273c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b084      	sub	sp, #16
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002746:	4b29      	ldr	r3, [pc, #164]	; (80027ec <prvAddCurrentTaskToDelayedList+0xb0>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800274c:	4b28      	ldr	r3, [pc, #160]	; (80027f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	3304      	adds	r3, #4
 8002752:	4618      	mov	r0, r3
 8002754:	f7fe ff1d 	bl	8001592 <uxListRemove>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d10b      	bne.n	8002776 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800275e:	4b24      	ldr	r3, [pc, #144]	; (80027f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002764:	2201      	movs	r2, #1
 8002766:	fa02 f303 	lsl.w	r3, r2, r3
 800276a:	43da      	mvns	r2, r3
 800276c:	4b21      	ldr	r3, [pc, #132]	; (80027f4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4013      	ands	r3, r2
 8002772:	4a20      	ldr	r2, [pc, #128]	; (80027f4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002774:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800277c:	d10a      	bne.n	8002794 <prvAddCurrentTaskToDelayedList+0x58>
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d007      	beq.n	8002794 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002784:	4b1a      	ldr	r3, [pc, #104]	; (80027f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	3304      	adds	r3, #4
 800278a:	4619      	mov	r1, r3
 800278c:	481a      	ldr	r0, [pc, #104]	; (80027f8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800278e:	f7fe fea3 	bl	80014d8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002792:	e026      	b.n	80027e2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002794:	68fa      	ldr	r2, [r7, #12]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	4413      	add	r3, r2
 800279a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800279c:	4b14      	ldr	r3, [pc, #80]	; (80027f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	68ba      	ldr	r2, [r7, #8]
 80027a2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80027a4:	68ba      	ldr	r2, [r7, #8]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d209      	bcs.n	80027c0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80027ac:	4b13      	ldr	r3, [pc, #76]	; (80027fc <prvAddCurrentTaskToDelayedList+0xc0>)
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	4b0f      	ldr	r3, [pc, #60]	; (80027f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	3304      	adds	r3, #4
 80027b6:	4619      	mov	r1, r3
 80027b8:	4610      	mov	r0, r2
 80027ba:	f7fe feb1 	bl	8001520 <vListInsert>
}
 80027be:	e010      	b.n	80027e2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80027c0:	4b0f      	ldr	r3, [pc, #60]	; (8002800 <prvAddCurrentTaskToDelayedList+0xc4>)
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	4b0a      	ldr	r3, [pc, #40]	; (80027f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	3304      	adds	r3, #4
 80027ca:	4619      	mov	r1, r3
 80027cc:	4610      	mov	r0, r2
 80027ce:	f7fe fea7 	bl	8001520 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80027d2:	4b0c      	ldr	r3, [pc, #48]	; (8002804 <prvAddCurrentTaskToDelayedList+0xc8>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	68ba      	ldr	r2, [r7, #8]
 80027d8:	429a      	cmp	r2, r3
 80027da:	d202      	bcs.n	80027e2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80027dc:	4a09      	ldr	r2, [pc, #36]	; (8002804 <prvAddCurrentTaskToDelayedList+0xc8>)
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	6013      	str	r3, [r2, #0]
}
 80027e2:	bf00      	nop
 80027e4:	3710      	adds	r7, #16
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	20003d50 	.word	0x20003d50
 80027f0:	20003c4c 	.word	0x20003c4c
 80027f4:	20003d54 	.word	0x20003d54
 80027f8:	20003d38 	.word	0x20003d38
 80027fc:	20003d08 	.word	0x20003d08
 8002800:	20003d04 	.word	0x20003d04
 8002804:	20003d6c 	.word	0x20003d6c

08002808 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8002808:	b480      	push	{r7}
 800280a:	b085      	sub	sp, #20
 800280c:	af00      	add	r7, sp, #0
 800280e:	60f8      	str	r0, [r7, #12]
 8002810:	60b9      	str	r1, [r7, #8]
 8002812:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	4a07      	ldr	r2, [pc, #28]	; (8002834 <vApplicationGetIdleTaskMemory+0x2c>)
 8002818:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	4a06      	ldr	r2, [pc, #24]	; (8002838 <vApplicationGetIdleTaskMemory+0x30>)
 800281e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2280      	movs	r2, #128	; 0x80
 8002824:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8002826:	bf00      	nop
 8002828:	3714      	adds	r7, #20
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr
 8002832:	bf00      	nop
 8002834:	20003d78 	.word	0x20003d78
 8002838:	20003dcc 	.word	0x20003dcc

0800283c <main>:
void StartDefaultTask_RIGHT(void const * argument);
void StartDefaultTask_UP(void const * argument);
void StartDefaultTask_LEFT(void const * argument);

int main(void)
{
 800283c:	b5b0      	push	{r4, r5, r7, lr}
 800283e:	b09c      	sub	sp, #112	; 0x70
 8002840:	af00      	add	r7, sp, #0

  HAL_Init();
 8002842:	f7fd fe4d 	bl	80004e0 <HAL_Init>

  SystemClock_Config();
 8002846:	f000 f85d 	bl	8002904 <SystemClock_Config>

  MX_GPIO_Init();
 800284a:	f000 f899 	bl	8002980 <MX_GPIO_Init>

  osThreadDef(defaultTask, StartDefaultTask_DOWN, osPriorityNormal, 1, 128);
 800284e:	4b28      	ldr	r3, [pc, #160]	; (80028f0 <main+0xb4>)
 8002850:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8002854:	461d      	mov	r5, r3
 8002856:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002858:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800285a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800285e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8002862:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002866:	2100      	movs	r1, #0
 8002868:	4618      	mov	r0, r3
 800286a:	f7fe fda8 	bl	80013be <osThreadCreate>
 800286e:	4602      	mov	r2, r0
 8002870:	4b20      	ldr	r3, [pc, #128]	; (80028f4 <main+0xb8>)
 8002872:	601a      	str	r2, [r3, #0]

	osThreadDef(defaultTask_1, StartDefaultTask_RIGHT, osPriorityNormal, 1, 128);
 8002874:	4b20      	ldr	r3, [pc, #128]	; (80028f8 <main+0xbc>)
 8002876:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800287a:	461d      	mov	r5, r3
 800287c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800287e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002880:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002884:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask_1), NULL);
 8002888:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800288c:	2100      	movs	r1, #0
 800288e:	4618      	mov	r0, r3
 8002890:	f7fe fd95 	bl	80013be <osThreadCreate>
 8002894:	4602      	mov	r2, r0
 8002896:	4b17      	ldr	r3, [pc, #92]	; (80028f4 <main+0xb8>)
 8002898:	601a      	str	r2, [r3, #0]

	osThreadDef(defaultTask_2, StartDefaultTask_UP, osPriorityNormal, 1, 128);
 800289a:	4b18      	ldr	r3, [pc, #96]	; (80028fc <main+0xc0>)
 800289c:	f107 041c 	add.w	r4, r7, #28
 80028a0:	461d      	mov	r5, r3
 80028a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028a6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80028aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask_2), NULL);
 80028ae:	f107 031c 	add.w	r3, r7, #28
 80028b2:	2100      	movs	r1, #0
 80028b4:	4618      	mov	r0, r3
 80028b6:	f7fe fd82 	bl	80013be <osThreadCreate>
 80028ba:	4602      	mov	r2, r0
 80028bc:	4b0d      	ldr	r3, [pc, #52]	; (80028f4 <main+0xb8>)
 80028be:	601a      	str	r2, [r3, #0]

	osThreadDef(defaultTask_3, StartDefaultTask_LEFT, osPriorityNormal, 1, 128);
 80028c0:	4b0f      	ldr	r3, [pc, #60]	; (8002900 <main+0xc4>)
 80028c2:	463c      	mov	r4, r7
 80028c4:	461d      	mov	r5, r3
 80028c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028ca:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80028ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask_3), NULL);
 80028d2:	463b      	mov	r3, r7
 80028d4:	2100      	movs	r1, #0
 80028d6:	4618      	mov	r0, r3
 80028d8:	f7fe fd71 	bl	80013be <osThreadCreate>
 80028dc:	4602      	mov	r2, r0
 80028de:	4b05      	ldr	r3, [pc, #20]	; (80028f4 <main+0xb8>)
 80028e0:	601a      	str	r2, [r3, #0]

  osKernelStart();
 80028e2:	f7fe fd65 	bl	80013b0 <osKernelStart>
 80028e6:	2300      	movs	r3, #0

}
 80028e8:	4618      	mov	r0, r3
 80028ea:	3770      	adds	r7, #112	; 0x70
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bdb0      	pop	{r4, r5, r7, pc}
 80028f0:	08002c24 	.word	0x08002c24
 80028f4:	20003fd0 	.word	0x20003fd0
 80028f8:	08002c50 	.word	0x08002c50
 80028fc:	08002c7c 	.word	0x08002c7c
 8002900:	08002ca8 	.word	0x08002ca8

08002904 <SystemClock_Config>:

void SystemClock_Config(void)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b092      	sub	sp, #72	; 0x48
 8002908:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800290a:	f107 0318 	add.w	r3, r7, #24
 800290e:	2230      	movs	r2, #48	; 0x30
 8002910:	2100      	movs	r1, #0
 8002912:	4618      	mov	r0, r3
 8002914:	f000 f968 	bl	8002be8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002918:	1d3b      	adds	r3, r7, #4
 800291a:	2200      	movs	r2, #0
 800291c:	601a      	str	r2, [r3, #0]
 800291e:	605a      	str	r2, [r3, #4]
 8002920:	609a      	str	r2, [r3, #8]
 8002922:	60da      	str	r2, [r3, #12]
 8002924:	611a      	str	r2, [r3, #16]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002926:	2301      	movs	r3, #1
 8002928:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800292a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800292e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002930:	2301      	movs	r3, #1
 8002932:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002934:	2300      	movs	r3, #0
 8002936:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002938:	f107 0318 	add.w	r3, r7, #24
 800293c:	4618      	mov	r0, r3
 800293e:	f7fe f8f3 	bl	8000b28 <HAL_RCC_OscConfig>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d001      	beq.n	800294c <SystemClock_Config+0x48>
  {
    Error_Handler();
 8002948:	f000 f88e 	bl	8002a68 <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800294c:	230f      	movs	r3, #15
 800294e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8002950:	2301      	movs	r3, #1
 8002952:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002954:	2300      	movs	r3, #0
 8002956:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002958:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800295c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800295e:	2300      	movs	r3, #0
 8002960:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002962:	1d3b      	adds	r3, r7, #4
 8002964:	2100      	movs	r1, #0
 8002966:	4618      	mov	r0, r3
 8002968:	f7fe fb4e 	bl	8001008 <HAL_RCC_ClockConfig>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d001      	beq.n	8002976 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8002972:	f000 f879 	bl	8002a68 <Error_Handler>
  }
}
 8002976:	bf00      	nop
 8002978:	3748      	adds	r7, #72	; 0x48
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
	...

08002980 <MX_GPIO_Init>:


static void MX_GPIO_Init(void)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b086      	sub	sp, #24
 8002984:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002986:	1d3b      	adds	r3, r7, #4
 8002988:	2200      	movs	r2, #0
 800298a:	601a      	str	r2, [r3, #0]
 800298c:	605a      	str	r2, [r3, #4]
 800298e:	609a      	str	r2, [r3, #8]
 8002990:	60da      	str	r2, [r3, #12]
 8002992:	611a      	str	r2, [r3, #16]

  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002994:	2300      	movs	r3, #0
 8002996:	603b      	str	r3, [r7, #0]
 8002998:	4a11      	ldr	r2, [pc, #68]	; (80029e0 <MX_GPIO_Init+0x60>)
 800299a:	4b11      	ldr	r3, [pc, #68]	; (80029e0 <MX_GPIO_Init+0x60>)
 800299c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299e:	f043 0308 	orr.w	r3, r3, #8
 80029a2:	6313      	str	r3, [r2, #48]	; 0x30
 80029a4:	4b0e      	ldr	r3, [pc, #56]	; (80029e0 <MX_GPIO_Init+0x60>)
 80029a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a8:	f003 0308 	and.w	r3, r3, #8
 80029ac:	603b      	str	r3, [r7, #0]
 80029ae:	683b      	ldr	r3, [r7, #0]

  GPIO_InitStruct.Pin = GPIO_PIN_15 | GPIO_PIN_14 | GPIO_PIN_13 | GPIO_PIN_12;
 80029b0:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80029b4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029b6:	2301      	movs	r3, #1
 80029b8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ba:	2300      	movs	r3, #0
 80029bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029be:	2300      	movs	r3, #0
 80029c0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80029c2:	1d3b      	adds	r3, r7, #4
 80029c4:	4619      	mov	r1, r3
 80029c6:	4807      	ldr	r0, [pc, #28]	; (80029e4 <MX_GPIO_Init+0x64>)
 80029c8:	f7fd fee0 	bl	800078c <HAL_GPIO_Init>

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15 | GPIO_PIN_14 | GPIO_PIN_13 | GPIO_PIN_12, GPIO_PIN_RESET);
 80029cc:	2200      	movs	r2, #0
 80029ce:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80029d2:	4804      	ldr	r0, [pc, #16]	; (80029e4 <MX_GPIO_Init+0x64>)
 80029d4:	f7fe f874 	bl	8000ac0 <HAL_GPIO_WritePin>

}
 80029d8:	bf00      	nop
 80029da:	3718      	adds	r7, #24
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	40023800 	.word	0x40023800
 80029e4:	40020c00 	.word	0x40020c00

080029e8 <StartDefaultTask_DOWN>:

void StartDefaultTask_DOWN(void const * argument)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b082      	sub	sp, #8
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
	for(;;)
  {
    HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 80029f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80029f4:	4803      	ldr	r0, [pc, #12]	; (8002a04 <StartDefaultTask_DOWN+0x1c>)
 80029f6:	f7fe f87c 	bl	8000af2 <HAL_GPIO_TogglePin>
    osDelay(100);															// I don't understand how counted this delay ???
 80029fa:	2064      	movs	r0, #100	; 0x64
 80029fc:	f7fe fd2b 	bl	8001456 <osDelay>
    HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8002a00:	e7f6      	b.n	80029f0 <StartDefaultTask_DOWN+0x8>
 8002a02:	bf00      	nop
 8002a04:	40020c00 	.word	0x40020c00

08002a08 <StartDefaultTask_RIGHT>:
	}
}

void StartDefaultTask_RIGHT(void const * argument)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
	for(;;)
  {
    HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8002a10:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002a14:	4803      	ldr	r0, [pc, #12]	; (8002a24 <StartDefaultTask_RIGHT+0x1c>)
 8002a16:	f7fe f86c 	bl	8000af2 <HAL_GPIO_TogglePin>
    osDelay(100);															// I don't understand how counted this delay ???
 8002a1a:	2064      	movs	r0, #100	; 0x64
 8002a1c:	f7fe fd1b 	bl	8001456 <osDelay>
    HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8002a20:	e7f6      	b.n	8002a10 <StartDefaultTask_RIGHT+0x8>
 8002a22:	bf00      	nop
 8002a24:	40020c00 	.word	0x40020c00

08002a28 <StartDefaultTask_UP>:
	}
}

void StartDefaultTask_UP(void const * argument)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b082      	sub	sp, #8
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
	for(;;)
  {
    HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8002a30:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002a34:	4803      	ldr	r0, [pc, #12]	; (8002a44 <StartDefaultTask_UP+0x1c>)
 8002a36:	f7fe f85c 	bl	8000af2 <HAL_GPIO_TogglePin>
    osDelay(100);															// I don't understand how counted this delay ???
 8002a3a:	2064      	movs	r0, #100	; 0x64
 8002a3c:	f7fe fd0b 	bl	8001456 <osDelay>
    HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8002a40:	e7f6      	b.n	8002a30 <StartDefaultTask_UP+0x8>
 8002a42:	bf00      	nop
 8002a44:	40020c00 	.word	0x40020c00

08002a48 <StartDefaultTask_LEFT>:
	}
}

void StartDefaultTask_LEFT(void const * argument)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b082      	sub	sp, #8
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
	for(;;)
  {
    HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8002a50:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002a54:	4803      	ldr	r0, [pc, #12]	; (8002a64 <StartDefaultTask_LEFT+0x1c>)
 8002a56:	f7fe f84c 	bl	8000af2 <HAL_GPIO_TogglePin>
    osDelay(100);															// I don't understand how counted this delay ???
 8002a5a:	2064      	movs	r0, #100	; 0x64
 8002a5c:	f7fe fcfb 	bl	8001456 <osDelay>
    HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8002a60:	e7f6      	b.n	8002a50 <StartDefaultTask_LEFT+0x8>
 8002a62:	bf00      	nop
 8002a64:	40020c00 	.word	0x40020c00

08002a68 <Error_Handler>:
	}
}


void Error_Handler(void)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	af00      	add	r7, sp, #0

}
 8002a6c:	bf00      	nop
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr
	...

08002a78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b082      	sub	sp, #8
 8002a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a7e:	2300      	movs	r3, #0
 8002a80:	607b      	str	r3, [r7, #4]
 8002a82:	4a12      	ldr	r2, [pc, #72]	; (8002acc <HAL_MspInit+0x54>)
 8002a84:	4b11      	ldr	r3, [pc, #68]	; (8002acc <HAL_MspInit+0x54>)
 8002a86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a8c:	6453      	str	r3, [r2, #68]	; 0x44
 8002a8e:	4b0f      	ldr	r3, [pc, #60]	; (8002acc <HAL_MspInit+0x54>)
 8002a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a96:	607b      	str	r3, [r7, #4]
 8002a98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	603b      	str	r3, [r7, #0]
 8002a9e:	4a0b      	ldr	r2, [pc, #44]	; (8002acc <HAL_MspInit+0x54>)
 8002aa0:	4b0a      	ldr	r3, [pc, #40]	; (8002acc <HAL_MspInit+0x54>)
 8002aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002aa8:	6413      	str	r3, [r2, #64]	; 0x40
 8002aaa:	4b08      	ldr	r3, [pc, #32]	; (8002acc <HAL_MspInit+0x54>)
 8002aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ab2:	603b      	str	r3, [r7, #0]
 8002ab4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	210f      	movs	r1, #15
 8002aba:	f06f 0001 	mvn.w	r0, #1
 8002abe:	f7fd fe3c 	bl	800073a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ac2:	bf00      	nop
 8002ac4:	3708      	adds	r7, #8
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	40023800 	.word	0x40023800

08002ad0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002ad4:	bf00      	nop
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr

08002ade <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ade:	b480      	push	{r7}
 8002ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ae2:	e7fe      	b.n	8002ae2 <HardFault_Handler+0x4>

08002ae4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ae8:	e7fe      	b.n	8002ae8 <MemManage_Handler+0x4>

08002aea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002aea:	b480      	push	{r7}
 8002aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002aee:	e7fe      	b.n	8002aee <BusFault_Handler+0x4>

08002af0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002af0:	b480      	push	{r7}
 8002af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002af4:	e7fe      	b.n	8002af4 <UsageFault_Handler+0x4>

08002af6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002af6:	b480      	push	{r7}
 8002af8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002afa:	bf00      	nop
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr

08002b04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b08:	f7fd fd3c 	bl	8000584 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002b0c:	f7ff fdf8 	bl	8002700 <xTaskGetSchedulerState>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d001      	beq.n	8002b1a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002b16:	f7fe ff1f 	bl	8001958 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b1a:	bf00      	nop
 8002b1c:	bd80      	pop	{r7, pc}
	...

08002b20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b20:	b480      	push	{r7}
 8002b22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b24:	4a08      	ldr	r2, [pc, #32]	; (8002b48 <SystemInit+0x28>)
 8002b26:	4b08      	ldr	r3, [pc, #32]	; (8002b48 <SystemInit+0x28>)
 8002b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002b34:	4b04      	ldr	r3, [pc, #16]	; (8002b48 <SystemInit+0x28>)
 8002b36:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002b3a:	609a      	str	r2, [r3, #8]
#endif
}
 8002b3c:	bf00      	nop
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr
 8002b46:	bf00      	nop
 8002b48:	e000ed00 	.word	0xe000ed00

08002b4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002b4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b84 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002b50:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002b52:	e003      	b.n	8002b5c <LoopCopyDataInit>

08002b54 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002b54:	4b0c      	ldr	r3, [pc, #48]	; (8002b88 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002b56:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002b58:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002b5a:	3104      	adds	r1, #4

08002b5c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002b5c:	480b      	ldr	r0, [pc, #44]	; (8002b8c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002b5e:	4b0c      	ldr	r3, [pc, #48]	; (8002b90 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002b60:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002b62:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002b64:	d3f6      	bcc.n	8002b54 <CopyDataInit>
  ldr  r2, =_sbss
 8002b66:	4a0b      	ldr	r2, [pc, #44]	; (8002b94 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002b68:	e002      	b.n	8002b70 <LoopFillZerobss>

08002b6a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002b6a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002b6c:	f842 3b04 	str.w	r3, [r2], #4

08002b70 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002b70:	4b09      	ldr	r3, [pc, #36]	; (8002b98 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002b72:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002b74:	d3f9      	bcc.n	8002b6a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002b76:	f7ff ffd3 	bl	8002b20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b7a:	f000 f811 	bl	8002ba0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b7e:	f7ff fe5d 	bl	800283c <main>
  bx  lr    
 8002b82:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002b84:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002b88:	08002ce4 	.word	0x08002ce4
  ldr  r0, =_sdata
 8002b8c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002b90:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8002b94:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8002b98:	20003fd4 	.word	0x20003fd4

08002b9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b9c:	e7fe      	b.n	8002b9c <ADC_IRQHandler>
	...

08002ba0 <__libc_init_array>:
 8002ba0:	b570      	push	{r4, r5, r6, lr}
 8002ba2:	4e0d      	ldr	r6, [pc, #52]	; (8002bd8 <__libc_init_array+0x38>)
 8002ba4:	4c0d      	ldr	r4, [pc, #52]	; (8002bdc <__libc_init_array+0x3c>)
 8002ba6:	1ba4      	subs	r4, r4, r6
 8002ba8:	10a4      	asrs	r4, r4, #2
 8002baa:	2500      	movs	r5, #0
 8002bac:	42a5      	cmp	r5, r4
 8002bae:	d109      	bne.n	8002bc4 <__libc_init_array+0x24>
 8002bb0:	4e0b      	ldr	r6, [pc, #44]	; (8002be0 <__libc_init_array+0x40>)
 8002bb2:	4c0c      	ldr	r4, [pc, #48]	; (8002be4 <__libc_init_array+0x44>)
 8002bb4:	f000 f820 	bl	8002bf8 <_init>
 8002bb8:	1ba4      	subs	r4, r4, r6
 8002bba:	10a4      	asrs	r4, r4, #2
 8002bbc:	2500      	movs	r5, #0
 8002bbe:	42a5      	cmp	r5, r4
 8002bc0:	d105      	bne.n	8002bce <__libc_init_array+0x2e>
 8002bc2:	bd70      	pop	{r4, r5, r6, pc}
 8002bc4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002bc8:	4798      	blx	r3
 8002bca:	3501      	adds	r5, #1
 8002bcc:	e7ee      	b.n	8002bac <__libc_init_array+0xc>
 8002bce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002bd2:	4798      	blx	r3
 8002bd4:	3501      	adds	r5, #1
 8002bd6:	e7f2      	b.n	8002bbe <__libc_init_array+0x1e>
 8002bd8:	08002cdc 	.word	0x08002cdc
 8002bdc:	08002cdc 	.word	0x08002cdc
 8002be0:	08002cdc 	.word	0x08002cdc
 8002be4:	08002ce0 	.word	0x08002ce0

08002be8 <memset>:
 8002be8:	4402      	add	r2, r0
 8002bea:	4603      	mov	r3, r0
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d100      	bne.n	8002bf2 <memset+0xa>
 8002bf0:	4770      	bx	lr
 8002bf2:	f803 1b01 	strb.w	r1, [r3], #1
 8002bf6:	e7f9      	b.n	8002bec <memset+0x4>

08002bf8 <_init>:
 8002bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bfa:	bf00      	nop
 8002bfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bfe:	bc08      	pop	{r3}
 8002c00:	469e      	mov	lr, r3
 8002c02:	4770      	bx	lr

08002c04 <_fini>:
 8002c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c06:	bf00      	nop
 8002c08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c0a:	bc08      	pop	{r3}
 8002c0c:	469e      	mov	lr, r3
 8002c0e:	4770      	bx	lr
